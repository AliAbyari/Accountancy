#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Accountancy
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Accountancy")]
	public partial class dcAccountancyDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    partial void InsertDepot(Depot instance);
    partial void UpdateDepot(Depot instance);
    partial void DeleteDepot(Depot instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertPeople(People instance);
    partial void UpdatePeople(People instance);
    partial void DeletePeople(People instance);
    partial void InsertCostGroup(CostGroup instance);
    partial void UpdateCostGroup(CostGroup instance);
    partial void DeleteCostGroup(CostGroup instance);
    partial void InsertBank(Bank instance);
    partial void UpdateBank(Bank instance);
    partial void DeleteBank(Bank instance);
    partial void InsertBook(Book instance);
    partial void UpdateBook(Book instance);
    partial void DeleteBook(Book instance);
    partial void InsertDocument(Document instance);
    partial void UpdateDocument(Document instance);
    partial void DeleteDocument(Document instance);
    partial void InsertTax(Tax instance);
    partial void UpdateTax(Tax instance);
    partial void DeleteTax(Tax instance);
    partial void InsertStock(Stock instance);
    partial void UpdateStock(Stock instance);
    partial void DeleteStock(Stock instance);
    partial void InsertFactor(Factor instance);
    partial void UpdateFactor(Factor instance);
    partial void DeleteFactor(Factor instance);
    partial void InsertDetail(Detail instance);
    partial void UpdateDetail(Detail instance);
    partial void DeleteDetail(Detail instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    #endregion
		
		public dcAccountancyDataContext() : 
				base(global::Accountancy.Properties.Settings.Default.AccountancyConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dcAccountancyDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcAccountancyDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcAccountancyDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcAccountancyDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
		
		public System.Data.Linq.Table<Depot> Depots
		{
			get
			{
				return this.GetTable<Depot>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<People> Peoples
		{
			get
			{
				return this.GetTable<People>();
			}
		}
		
		public System.Data.Linq.Table<CostGroup> CostGroups
		{
			get
			{
				return this.GetTable<CostGroup>();
			}
		}
		
		public System.Data.Linq.Table<Bank> Banks
		{
			get
			{
				return this.GetTable<Bank>();
			}
		}
		
		public System.Data.Linq.Table<Book> Books
		{
			get
			{
				return this.GetTable<Book>();
			}
		}
		
		public System.Data.Linq.Table<Document> Documents
		{
			get
			{
				return this.GetTable<Document>();
			}
		}
		
		public System.Data.Linq.Table<Tax> Taxes
		{
			get
			{
				return this.GetTable<Tax>();
			}
		}
		
		public System.Data.Linq.Table<Stock> Stocks
		{
			get
			{
				return this.GetTable<Stock>();
			}
		}
		
		public System.Data.Linq.Table<ViewStock> ViewStocks
		{
			get
			{
				return this.GetTable<ViewStock>();
			}
		}
		
		public System.Data.Linq.Table<Factor> Factors
		{
			get
			{
				return this.GetTable<Factor>();
			}
		}
		
		public System.Data.Linq.Table<Detail> Details
		{
			get
			{
				return this.GetTable<Detail>();
			}
		}
		
		public System.Data.Linq.Table<ViewFactorDetail> ViewFactorDetails
		{
			get
			{
				return this.GetTable<ViewFactorDetail>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<ViewFactor> ViewFactors
		{
			get
			{
				return this.GetTable<ViewFactor>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ExistsSetting")]
		public int ExistsSetting([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Exists", DbType="Bit")] ref System.Nullable<bool> exists)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), exists);
			exists = ((System.Nullable<bool>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillSetting")]
		public ISingleResult<Setting> FillSetting()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Setting>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertSetting")]
		public int InsertSetting([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CompanyName", DbType="NVarChar(100)")] string companyName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorAddress", DbType="NVarChar(MAX)")] string factorAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorTel", DbType="NVarChar(20)")] string factorTel, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InvoiceAddress", DbType="NVarChar(MAX)")] string invoiceAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InvoiceTel", DbType="NVarChar(20)")] string invoiceTel, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SmsUser", DbType="NVarChar(20)")] string smsUser, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SmsPass", DbType="NVarChar(20)")] string smsPass, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SmsSender", DbType="NVarChar(20)")] string smsSender, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserMobile", DbType="NVarChar(11)")] string userMobile, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Alarm1", DbType="Int")] System.Nullable<int> alarm1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Alarm2", DbType="Int")] System.Nullable<int> alarm2, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankSend", DbType="Bit")] System.Nullable<bool> bankSend, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorSend", DbType="Bit")] System.Nullable<bool> factorSend)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), companyName, factorAddress, factorTel, invoiceAddress, invoiceTel, smsUser, smsPass, smsSender, userMobile, alarm1, alarm2, bankSend, factorSend);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateSetting")]
		public int UpdateSetting([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CompanyName", DbType="NVarChar(100)")] string companyName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorAddress", DbType="NVarChar(MAX)")] string factorAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorTel", DbType="NVarChar(20)")] string factorTel, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InvoiceAddress", DbType="NVarChar(MAX)")] string invoiceAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InvoiceTel", DbType="NVarChar(20)")] string invoiceTel, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SmsUser", DbType="NVarChar(20)")] string smsUser, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SmsPass", DbType="NVarChar(20)")] string smsPass, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SmsSender", DbType="NVarChar(20)")] string smsSender, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserMobile", DbType="NVarChar(11)")] string userMobile, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Alarm1", DbType="Int")] System.Nullable<int> alarm1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Alarm2", DbType="Int")] System.Nullable<int> alarm2, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankSend", DbType="Bit")] System.Nullable<bool> bankSend, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorSend", DbType="Bit")] System.Nullable<bool> factorSend)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), companyName, factorAddress, factorTel, invoiceAddress, invoiceTel, smsUser, smsPass, smsSender, userMobile, alarm1, alarm2, bankSend, factorSend);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteRoles")]
		public int DeleteRoles([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleId", DbType="Int")] System.Nullable<int> roleId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roleId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ExistsRoles")]
		public int ExistsRoles([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Exist", DbType="Bit")] ref System.Nullable<bool> exist)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), exist);
			exist = ((System.Nullable<bool>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillRoles")]
		public ISingleResult<Role> FillRoles()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Role>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillRolesById")]
		public ISingleResult<Role> FillRolesById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleId", DbType="Int")] System.Nullable<int> roleId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roleId);
			return ((ISingleResult<Role>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertRoles")]
		public int InsertRoles([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(100)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Depot", DbType="Bit")] System.Nullable<bool> depot, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Bank", DbType="Bit")] System.Nullable<bool> bank, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Person", DbType="Bit")] System.Nullable<bool> person, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Factor", DbType="Bit")] System.Nullable<bool> factor, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Setting", DbType="Bit")] System.Nullable<bool> setting, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="User", DbType="Bit")] System.Nullable<bool> user)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, depot, bank, person, factor, setting, user);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateRoles")]
		public int UpdateRoles([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleId", DbType="Int")] System.Nullable<int> roleId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(100)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Depot", DbType="Bit")] System.Nullable<bool> depot, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Bank", DbType="Bit")] System.Nullable<bool> bank, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Person", DbType="Bit")] System.Nullable<bool> person, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Factor", DbType="Bit")] System.Nullable<bool> factor, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Setting", DbType="Bit")] System.Nullable<bool> setting, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="User", DbType="Bit")] System.Nullable<bool> user)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roleId, name, depot, bank, person, factor, setting, user);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ExistsUsers")]
		public int ExistsUsers([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Exist", DbType="Bit")] ref System.Nullable<bool> exist)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), exist);
			exist = ((System.Nullable<bool>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteUsers")]
		public int DeleteUsers([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillUsers")]
		public ISingleResult<User> FillUsers()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<User>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillUsersById")]
		public ISingleResult<User> FillUsersById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId);
			return ((ISingleResult<User>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertUsers")]
		public int InsertUsers([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleId", DbType="Int")] System.Nullable<int> roleId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="User", DbType="NVarChar(20)")] string user, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Pass", DbType="NVarChar(20)")] string pass)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roleId, user, pass);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateUsers")]
		public int UpdateUsers([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleId", DbType="Int")] System.Nullable<int> roleId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="User", DbType="NVarChar(20)")] string user, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Pass", DbType="NVarChar(20)")] string pass)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, roleId, user, pass);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CheckUsersName")]
		public int CheckUsersName([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Check", DbType="Bit")] ref System.Nullable<bool> check, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(20)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), check, name);
			check = ((System.Nullable<bool>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CheckUserPass")]
		public int CheckUserPass([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Check", DbType="Bit")] ref System.Nullable<bool> check, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Pass", DbType="NVarChar(20)")] string pass)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), check, pass);
			check = ((System.Nullable<bool>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetLoginId")]
		public int GetLoginId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] ref System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(20)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Pass", DbType="NVarChar(20)")] string pass)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, pass);
			id = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateLoginPass")]
		public int UpdateLoginPass([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Pass", DbType="NVarChar(20)")] string pass)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, pass);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CheckLoginPassById")]
		public int CheckLoginPassById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Pass", DbType="NVarChar(20)")] string pass, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Check", DbType="Bit")] ref System.Nullable<bool> check)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, pass, check);
			check = ((System.Nullable<bool>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetUserPermission")]
		public int GetUserPermission([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Depot", DbType="Bit")] ref System.Nullable<bool> depot, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Bank", DbType="Bit")] ref System.Nullable<bool> bank, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Factor", DbType="Bit")] ref System.Nullable<bool> factor, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Person", DbType="Bit")] ref System.Nullable<bool> person, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Setting", DbType="Bit")] ref System.Nullable<bool> setting, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="User", DbType="Bit")] ref System.Nullable<bool> user)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, depot, bank, factor, person, setting, user);
			depot = ((System.Nullable<bool>)(result.GetParameterValue(1)));
			bank = ((System.Nullable<bool>)(result.GetParameterValue(2)));
			factor = ((System.Nullable<bool>)(result.GetParameterValue(3)));
			person = ((System.Nullable<bool>)(result.GetParameterValue(4)));
			setting = ((System.Nullable<bool>)(result.GetParameterValue(5)));
			user = ((System.Nullable<bool>)(result.GetParameterValue(6)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertLogs")]
		public int InsertLogs([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LogIn", DbType="NVarChar(30)")] string logIn)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, logIn);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateLogs")]
		public int UpdateLogs([global::System.Data.Linq.Mapping.ParameterAttribute(Name="LogId", DbType="Int")] System.Nullable<int> logId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LogOut", DbType="NVarChar(30)")] string logOut)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), logId, logOut);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetLogId")]
		public int GetLogId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="LogId", DbType="Int")] ref System.Nullable<int> logId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), logId, userId);
			logId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillLogs")]
		public ISingleResult<Log> FillLogs([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId);
			return ((ISingleResult<Log>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteDepot")]
		public int DeleteDepot([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DepotId", DbType="Int")] System.Nullable<int> depotId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), depotId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertDepot")]
		public int InsertDepot([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DepotName", DbType="NVarChar(100)")] string depotName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), depotName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateDepot")]
		public int UpdateDepot([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DepotId", DbType="Int")] System.Nullable<int> depotId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DepotName", DbType="NVarChar(100)")] string depotName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), depotId, depotName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillDepot")]
		public ISingleResult<Depot> FillDepot()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Depot>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillDepotById")]
		public ISingleResult<Depot> FillDepotById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DepotId", DbType="Int")] System.Nullable<int> depotId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), depotId);
			return ((ISingleResult<Depot>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteGroup")]
		public int DeleteGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateGroup")]
		public int UpdateGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(100)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Unit1", DbType="NVarChar(30)")] string unit1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Unit2", DbType="NVarChar(30)")] string unit2)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, unit1, unit2);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertGroup")]
		public int InsertGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(100)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Unit1", DbType="NVarChar(30)")] string unit1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Unit2", DbType="NVarChar(30)")] string unit2)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, unit1, unit2);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillGroup")]
		public ISingleResult<Group> FillGroup()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Group>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillGroupById")]
		public ISingleResult<Group> FillGroupById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((ISingleResult<Group>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteProduct")]
		public int DeleteProduct([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductId", DbType="Int")] System.Nullable<int> productId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), productId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillProductById")]
		public ISingleResult<Product> FillProductById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductId", DbType="Int")] System.Nullable<int> productId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), productId);
			return ((ISingleResult<Product>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterProduct")]
		public ISingleResult<Product> FilterProduct([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductName", DbType="NVarChar(200)")] string productName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), productName);
			return ((ISingleResult<Product>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterProductByGroup")]
		public ISingleResult<Product> FilterProductByGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="Int")] System.Nullable<int> groupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductName", DbType="NVarChar(200)")] string productName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupId, productName);
			return ((ISingleResult<Product>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertProduct")]
		public int InsertProduct([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="Int")] System.Nullable<int> groupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductName", DbType="NVarChar(200)")] string productName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductSize", DbType="Float")] System.Nullable<double> productSize, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductPrice", DbType="Int")] System.Nullable<int> productPrice, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductAlarm", DbType="Int")] System.Nullable<int> productAlarm, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductDes", DbType="NVarChar(MAX)")] string productDes)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupId, productName, productSize, productPrice, productAlarm, productDes);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateProduct")]
		public int UpdateProduct([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductId", DbType="Int")] System.Nullable<int> productId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="Int")] System.Nullable<int> groupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductName", DbType="NVarChar(200)")] string productName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductSize", DbType="Float")] System.Nullable<double> productSize, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductPrice", DbType="Int")] System.Nullable<int> productPrice, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductAlarm", DbType="Int")] System.Nullable<int> productAlarm, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductDes", DbType="NVarChar(MAX)")] string productDes)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), productId, groupId, productName, productSize, productPrice, productAlarm, productDes);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeletePerson")]
		public int DeletePerson([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonId", DbType="Int")] System.Nullable<int> personId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), personId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillPersonById")]
		public ISingleResult<People> FillPersonById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonId", DbType="Int")] System.Nullable<int> personId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), personId);
			return ((ISingleResult<People>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterPerson")]
		public ISingleResult<People> FilterPerson([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonName", DbType="NVarChar(100)")] string personName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), personName);
			return ((ISingleResult<People>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertPerson")]
		public int InsertPerson([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonName", DbType="NVarChar(100)")] string personName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonTel", DbType="NVarChar(20)")] string personTel, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonMobile", DbType="NVarChar(11)")] string personMobile, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonDebtor", DbType="Int")] System.Nullable<int> personDebtor, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonCreditor", DbType="Int")] System.Nullable<int> personCreditor)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), personName, personTel, personMobile, personDebtor, personCreditor);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdatePerson")]
		public int UpdatePerson([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonId", DbType="Int")] System.Nullable<int> personId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonName", DbType="NVarChar(100)")] string personName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonTel", DbType="NVarChar(20)")] string personTel, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonMobile", DbType="NVarChar(11)")] string personMobile, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonDebtor", DbType="Int")] System.Nullable<int> personDebtor, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonCreditor", DbType="Int")] System.Nullable<int> personCreditor)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), personId, personName, personTel, personMobile, personDebtor, personCreditor);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteCostGroup")]
		public int DeleteCostGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillCostGroupById")]
		public ISingleResult<CostGroup> FillCostGroupById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((ISingleResult<CostGroup>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillCostGroupType1")]
		public ISingleResult<CostGroup> FillCostGroupType1()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<CostGroup>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillCostGroupType2")]
		public ISingleResult<CostGroup> FillCostGroupType2()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<CostGroup>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertCostGroup")]
		public int InsertCostGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type", DbType="Bit")] System.Nullable<bool> type, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Static", DbType="Bit")] System.Nullable<bool> @static, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(100)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Des", DbType="NVarChar(MAX)")] string des)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type, @static, name, des);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateCostGroup")]
		public int UpdateCostGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type", DbType="Bit")] System.Nullable<bool> type, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Static", DbType="Bit")] System.Nullable<bool> @static, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(100)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Des", DbType="NVarChar(MAX)")] string des)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, type, @static, name, des);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetSmsSetting")]
		public int GetSmsSetting([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Username", DbType="NVarChar(20)")] ref string username, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Password", DbType="NVarChar(20)")] ref string password, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Sender", DbType="NVarChar(20)")] ref string sender)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), username, password, sender);
			username = ((string)(result.GetParameterValue(0)));
			password = ((string)(result.GetParameterValue(1)));
			sender = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteBank")]
		public int DeleteBank([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankId", DbType="Int")] System.Nullable<int> bankId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bankId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillBankById")]
		public ISingleResult<Bank> FillBankById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankId", DbType="Int")] System.Nullable<int> bankId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bankId);
			return ((ISingleResult<Bank>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillBankType1")]
		public ISingleResult<Bank> FillBankType1()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Bank>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillBankType2")]
		public ISingleResult<Bank> FillBankType2()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Bank>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertBank")]
		public int InsertBank([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(100)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Number", DbType="NVarChar(30)")] string number, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Person", DbType="NVarChar(100)")] string person, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type", DbType="Bit")] System.Nullable<bool> type)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, number, person, type);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateBank")]
		public int UpdateBank([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankId", DbType="Int")] System.Nullable<int> bankId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(100)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Number", DbType="NVarChar(30)")] string number, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Person", DbType="NVarChar(100)")] string person, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type", DbType="Bit")] System.Nullable<bool> type)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bankId, name, number, person, type);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteBook")]
		public int DeleteBook([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BookId", DbType="Int")] System.Nullable<int> bookId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bookId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillBookById")]
		public ISingleResult<Book> FillBookById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BookId", DbType="Int")] System.Nullable<int> bookId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bookId);
			return ((ISingleResult<Book>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterBookByDate")]
		public ISingleResult<Book> FilterBookByDate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankId", DbType="Int")] System.Nullable<int> bankId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date1", DbType="NVarChar(10)")] string date1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date2", DbType="NVarChar(10)")] string date2)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bankId, date1, date2);
			return ((ISingleResult<Book>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertBook")]
		public int InsertBook([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankId", DbType="Int")] System.Nullable<int> bankId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CostId", DbType="Int")] System.Nullable<int> costId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonId", DbType="Int")] System.Nullable<int> personId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date", DbType="NVarChar(10)")] string date, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Time", DbType="NVarChar(10)")] string time, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Des", DbType="NVarChar(200)")] string des, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Price", DbType="Int")] System.Nullable<int> price)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bankId, costId, personId, date, time, des, price);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateBook")]
		public int UpdateBook([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BookId", DbType="Int")] System.Nullable<int> bookId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankId", DbType="Int")] System.Nullable<int> bankId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CostId", DbType="Int")] System.Nullable<int> costId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonId", DbType="Int")] System.Nullable<int> personId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date", DbType="NVarChar(10)")] string date, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Time", DbType="NVarChar(10)")] string time, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Des", DbType="NVarChar(200)")] string des, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Price", DbType="Int")] System.Nullable<int> price)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bookId, bankId, costId, personId, date, time, des, price);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetSumBook")]
		public int GetSumBook([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankId", DbType="Int")] System.Nullable<int> bankId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Sum", DbType="Int")] ref System.Nullable<int> sum)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bankId, sum);
			sum = ((System.Nullable<int>)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillCostGroup")]
		public ISingleResult<CostGroup> FillCostGroup()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<CostGroup>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteDocument")]
		public int DeleteDocument([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DocId", DbType="Int")] System.Nullable<int> docId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), docId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ExistsDocument")]
		public int ExistsDocument([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Number", DbType="NVarChar(30)")] string number, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Exists", DbType="Bit")] ref System.Nullable<bool> exists)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), number, exists);
			exists = ((System.Nullable<bool>)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillDocumentById")]
		public ISingleResult<Document> FillDocumentById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DocId", DbType="Int")] System.Nullable<int> docId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), docId);
			return ((ISingleResult<Document>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterDocument1ByNumber")]
		public ISingleResult<Document> FilterDocument1ByNumber([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Number", DbType="NVarChar(30)")] string number)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), number);
			return ((ISingleResult<Document>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterDocument2ByNumber")]
		public ISingleResult<Document> FilterDocument2ByNumber([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Number", DbType="NVarChar(30)")] string number)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), number);
			return ((ISingleResult<Document>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertDocument")]
		public int InsertDocument([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankId", DbType="Int")] System.Nullable<int> bankId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CostId", DbType="Int")] System.Nullable<int> costId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonId", DbType="Int")] System.Nullable<int> personId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date1", DbType="NVarChar(10)")] string date1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date2", DbType="NVarChar(10)")] string date2, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Price", DbType="Int")] System.Nullable<int> price, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Des", DbType="NVarChar(200)")] string des, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Number", DbType="NVarChar(30)")] string number, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Ok", DbType="Bit")] System.Nullable<bool> ok)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bankId, costId, personId, date1, date2, price, des, number, ok);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateDocument")]
		public int UpdateDocument([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DocId", DbType="Int")] System.Nullable<int> docId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankId", DbType="Int")] System.Nullable<int> bankId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CostId", DbType="Int")] System.Nullable<int> costId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonId", DbType="Int")] System.Nullable<int> personId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date1", DbType="NVarChar(10)")] string date1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date2", DbType="NVarChar(10)")] string date2, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Price", DbType="Int")] System.Nullable<int> price, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Des", DbType="NVarChar(200)")] string des, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Number", DbType="NVarChar(30)")] string number)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), docId, bankId, costId, personId, date1, date2, price, des, number);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateDocumentPass")]
		public int UpdateDocumentPass([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DocId", DbType="Int")] System.Nullable<int> docId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), docId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillTax")]
		public ISingleResult<Tax> FillTax()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Tax>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateTax")]
		public int UpdateTax([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TaxBuy", DbType="Float")] System.Nullable<double> taxBuy, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TaxSale", DbType="Float")] System.Nullable<double> taxSale)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), taxBuy, taxSale);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetDebtorCreditor")]
		public int GetDebtorCreditor([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Debtor", DbType="Int")] ref System.Nullable<int> debtor, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Creditor", DbType="Int")] ref System.Nullable<int> creditor, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonId", DbType="Int")] System.Nullable<int> personId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), debtor, creditor, personId);
			debtor = ((System.Nullable<int>)(result.GetParameterValue(0)));
			creditor = ((System.Nullable<int>)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateDebtor")]
		public int UpdateDebtor([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Debtor", DbType="Int")] System.Nullable<int> debtor, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonId", DbType="Int")] System.Nullable<int> personId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), debtor, personId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateCreditor")]
		public int UpdateCreditor([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Creditor", DbType="Int")] System.Nullable<int> creditor, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonId", DbType="Int")] System.Nullable<int> personId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), creditor, personId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertStock")]
		public int InsertStock([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorId", DbType="Int")] System.Nullable<int> factorId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DepotId", DbType="Int")] System.Nullable<int> depotId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductId", DbType="Int")] System.Nullable<int> productId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date", DbType="NVarChar(10)")] string date, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Des", DbType="NVarChar(100)")] string des, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="In", DbType="Int")] System.Nullable<int> @in, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Out", DbType="Int")] System.Nullable<int> @out)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), factorId, depotId, productId, date, des, @in, @out);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterStock")]
		public ISingleResult<Stock> FilterStock([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DepotId", DbType="Int")] System.Nullable<int> depotId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductId", DbType="Int")] System.Nullable<int> productId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), depotId, productId);
			return ((ISingleResult<Stock>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillDepotByProduct")]
		public ISingleResult<Depot> FillDepotByProduct([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductId", DbType="Int")] System.Nullable<int> productId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), productId);
			return ((ISingleResult<Depot>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterViewStock")]
		public ISingleResult<ViewStock> FilterViewStock([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(100)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name);
			return ((ISingleResult<ViewStock>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetProductStockInDepot")]
		public int GetProductStockInDepot([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DepotId", DbType="Int")] System.Nullable<int> depotId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductId", DbType="Int")] System.Nullable<int> productId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Sum", DbType="Int")] ref System.Nullable<int> sum)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), depotId, productId, sum);
			sum = ((System.Nullable<int>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillStockAlarm")]
		public ISingleResult<ViewStock> FillStockAlarm()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ViewStock>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteFactor")]
		public int DeleteFactor([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorId", DbType="Int")] System.Nullable<int> factorId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), factorId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetMaxFactorId")]
		public int GetMaxFactorId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorId", DbType="Int")] ref System.Nullable<int> factorId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), factorId);
			factorId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetMaxSaleNumber")]
		public int GetMaxSaleNumber([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Number", DbType="NVarChar(10)")] ref string number)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), number);
			number = ((string)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetSettingFactorSend")]
		public int GetSettingFactorSend([global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsSend", DbType="Bit")] ref System.Nullable<bool> isSend)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), isSend);
			isSend = ((System.Nullable<bool>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertDetail")]
		public int InsertDetail([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorId", DbType="Int")] System.Nullable<int> factorId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductId", DbType="Int")] System.Nullable<int> productId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DepotId", DbType="Int")] System.Nullable<int> depotId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Value1", DbType="Float")] System.Nullable<double> value1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Value2", DbType="Int")] System.Nullable<int> value2, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Default", DbType="Int")] System.Nullable<int> @default, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Price", DbType="Int")] System.Nullable<int> price, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Exit", DbType="Bit")] System.Nullable<bool> exit)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), factorId, productId, depotId, value1, value2, @default, price, exit);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ExistSaleNumber")]
		public int ExistSaleNumber([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Exist", DbType="Bit")] ref System.Nullable<bool> exist)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), exist);
			exist = ((System.Nullable<bool>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetGroupUnit")]
		public int GetGroupUnit([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Unit1", DbType="NVarChar(20)")] ref string unit1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Unit2", DbType="NVarChar(20)")] ref string unit2, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductId", DbType="Int")] System.Nullable<int> productId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), unit1, unit2, productId);
			unit1 = ((string)(result.GetParameterValue(0)));
			unit2 = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetDefaultTax")]
		public int GetDefaultTax([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SaleTax", DbType="Float")] ref System.Nullable<double> saleTax, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BuyTax", DbType="Float")] ref System.Nullable<double> buyTax)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), saleTax, buyTax);
			saleTax = ((System.Nullable<double>)(result.GetParameterValue(0)));
			buyTax = ((System.Nullable<double>)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertFactor")]
		public int InsertFactor([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonId", DbType="Int")] System.Nullable<int> personId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Number", DbType="NVarChar(10)")] string number, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date", DbType="NVarChar(10)")] string date, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DefaultTax", DbType="Float")] System.Nullable<double> defaultTax, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorPrice", DbType="Int")] System.Nullable<int> factorPrice, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TaxPrice", DbType="Int")] System.Nullable<int> taxPrice, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SerPrice", DbType="Int")] System.Nullable<int> serPrice, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CutPrice", DbType="Int")] System.Nullable<int> cutPrice, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorType", DbType="Bit")] System.Nullable<bool> factorType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SumPrice", DbType="Int")] System.Nullable<int> sumPrice)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), personId, number, date, defaultTax, factorPrice, taxPrice, serPrice, cutPrice, factorType, sumPrice);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterBuyByDate")]
		public ISingleResult<Factor> FilterBuyByDate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date1", DbType="NVarChar(10)")] string date1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date2", DbType="NVarChar(10)")] string date2)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), date1, date2);
			return ((ISingleResult<Factor>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterSaleByDate")]
		public ISingleResult<Factor> FilterSaleByDate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date1", DbType="NVarChar(10)")] string date1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date2", DbType="NVarChar(10)")] string date2)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), date1, date2);
			return ((ISingleResult<Factor>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillViewFactorDetails")]
		public ISingleResult<ViewFactorDetail> FillViewFactorDetails([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorId", DbType="Int")] System.Nullable<int> factorId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), factorId);
			return ((ISingleResult<ViewFactorDetail>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateDetails")]
		public int UpdateDetails([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DetailId", DbType="Int")] System.Nullable<int> detailId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DepotId", DbType="Int")] System.Nullable<int> depotId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), detailId, depotId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetDefaultDepotId")]
		public int GetDefaultDepotId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DepotId", DbType="Int")] ref System.Nullable<int> depotId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), depotId);
			depotId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetSettingAddress")]
		public int GetSettingAddress([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorAddress", DbType="NVarChar(MAX)")] ref string factorAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InvoiceAddress", DbType="NVarChar(MAX)")] ref string invoiceAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorTel", DbType="NVarChar(20)")] ref string factorTel, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InvoiceTel", DbType="NVarChar(20)")] ref string invoiceTel, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Company", DbType="NVarChar(100)")] ref string company)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), factorAddress, invoiceAddress, factorTel, invoiceTel, company);
			factorAddress = ((string)(result.GetParameterValue(0)));
			invoiceAddress = ((string)(result.GetParameterValue(1)));
			factorTel = ((string)(result.GetParameterValue(2)));
			invoiceTel = ((string)(result.GetParameterValue(3)));
			company = ((string)(result.GetParameterValue(4)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetCostGroupStatus")]
		public int GetCostGroupStatus([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupStatus", DbType="Bit")] ref System.Nullable<bool> groupStatus, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CostGroupId", DbType="Int")] System.Nullable<int> costGroupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupStatus, costGroupId);
			groupStatus = ((System.Nullable<bool>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetSettingBankSend")]
		public int GetSettingBankSend([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankSend", DbType="Bit")] ref System.Nullable<bool> bankSend, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Mobile", DbType="NVarChar(11)")] ref string mobile)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bankSend, mobile);
			bankSend = ((System.Nullable<bool>)(result.GetParameterValue(0)));
			mobile = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetBankNameById")]
		public int GetBankNameById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankId", DbType="Int")] System.Nullable<int> bankId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankName", DbType="NVarChar(100)")] string bankName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bankId, bankName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterBookByPerson")]
		public ISingleResult<Book> FilterBookByPerson([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonId", DbType="Int")] System.Nullable<int> personId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), personId);
			return ((ISingleResult<Book>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterDocumentByPerson")]
		public ISingleResult<Document> FilterDocumentByPerson([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonId", DbType="Int")] System.Nullable<int> personId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), personId);
			return ((ISingleResult<Document>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterFactorByPerson")]
		public ISingleResult<Factor> FilterFactorByPerson([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonId", DbType="Int")] System.Nullable<int> personId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), personId);
			return ((ISingleResult<Factor>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetSumBookByPerson")]
		public int GetSumBookByPerson([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonId", DbType="Int")] System.Nullable<int> personId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SumSale", DbType="Int")] ref System.Nullable<int> sumSale, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SumBuy", DbType="Int")] ref System.Nullable<int> sumBuy)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), personId, sumSale, sumBuy);
			sumSale = ((System.Nullable<int>)(result.GetParameterValue(1)));
			sumBuy = ((System.Nullable<int>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetSumDocumentByPerson")]
		public int GetSumDocumentByPerson([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonId", DbType="Int")] System.Nullable<int> personId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SumSale", DbType="Int")] ref System.Nullable<int> sumSale, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SumBuy", DbType="Int")] ref System.Nullable<int> sumBuy)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), personId, sumSale, sumBuy);
			sumSale = ((System.Nullable<int>)(result.GetParameterValue(1)));
			sumBuy = ((System.Nullable<int>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetSumFactorByPerson")]
		public int GetSumFactorByPerson([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonId", DbType="Int")] System.Nullable<int> personId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SumSale", DbType="Int")] ref System.Nullable<int> sumSale, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SumBuy", DbType="Int")] ref System.Nullable<int> sumBuy)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), personId, sumSale, sumBuy);
			sumSale = ((System.Nullable<int>)(result.GetParameterValue(1)));
			sumBuy = ((System.Nullable<int>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteMessage")]
		public int DeleteMessage([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillMessage")]
		public ISingleResult<Message> FillMessage()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Message>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertMessage")]
		public int InsertMessage([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MessageText", DbType="NVarChar(MAX)")] string messageText)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), messageText);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ExistsMessage")]
		public int ExistsMessage([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Exist", DbType="Bit")] ref System.Nullable<bool> exist)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), exist);
			exist = ((System.Nullable<bool>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetRandomMessage")]
		public int GetRandomMessage([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MessageText", DbType="NVarChar(MAX)")] ref string messageText)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), messageText);
			messageText = ((string)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterSaleReport")]
		public ISingleResult<ViewFactor> FilterSaleReport([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date1", DbType="NVarChar(10)")] string date1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date2", DbType="NVarChar(10)")] string date2)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), date1, date2);
			return ((ISingleResult<ViewFactor>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterBuyReport")]
		public ISingleResult<ViewFactor> FilterBuyReport([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date1", DbType="NVarChar(10)")] string date1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date2", DbType="NVarChar(10)")] string date2)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), date1, date2);
			return ((ISingleResult<ViewFactor>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetSumBuyReport")]
		public int GetSumBuyReport([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date1", DbType="NVarChar(10)")] string date1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date2", DbType="NVarChar(10)")] string date2, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SumFactor", DbType="Int")] ref System.Nullable<int> sumFactor, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SumBook", DbType="Int")] ref System.Nullable<int> sumBook)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), date1, date2, sumFactor, sumBook);
			sumFactor = ((System.Nullable<int>)(result.GetParameterValue(2)));
			sumBook = ((System.Nullable<int>)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetSumSaleReport")]
		public int GetSumSaleReport([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date1", DbType="NVarChar(10)")] string date1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date2", DbType="NVarChar(10)")] string date2, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SumFactor", DbType="Int")] ref System.Nullable<int> sumFactor, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SumBook", DbType="Int")] ref System.Nullable<int> sumBook)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), date1, date2, sumFactor, sumBook);
			sumFactor = ((System.Nullable<int>)(result.GetParameterValue(2)));
			sumBook = ((System.Nullable<int>)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetMoenyReportByDate")]
		public int GetMoenyReportByDate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Cost1", DbType="Int")] ref System.Nullable<int> cost1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Cost2", DbType="Int")] ref System.Nullable<int> cost2, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Sale", DbType="Int")] ref System.Nullable<int> sale, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Buy", DbType="Int")] ref System.Nullable<int> buy, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Doc1", DbType="Int")] ref System.Nullable<int> doc1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Doc2", DbType="Int")] ref System.Nullable<int> doc2, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date1", DbType="NVarChar(10)")] string date1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date2", DbType="NVarChar(10)")] string date2)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cost1, cost2, sale, buy, doc1, doc2, date1, date2);
			cost1 = ((System.Nullable<int>)(result.GetParameterValue(0)));
			cost2 = ((System.Nullable<int>)(result.GetParameterValue(1)));
			sale = ((System.Nullable<int>)(result.GetParameterValue(2)));
			buy = ((System.Nullable<int>)(result.GetParameterValue(3)));
			doc1 = ((System.Nullable<int>)(result.GetParameterValue(4)));
			doc2 = ((System.Nullable<int>)(result.GetParameterValue(5)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetMoenyReportByYear")]
		public int GetMoenyReportByYear([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Cost1", DbType="Int")] ref System.Nullable<int> cost1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Cost2", DbType="Int")] ref System.Nullable<int> cost2, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Sale", DbType="Int")] ref System.Nullable<int> sale, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Buy", DbType="Int")] ref System.Nullable<int> buy, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Doc1", DbType="Int")] ref System.Nullable<int> doc1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Doc2", DbType="Int")] ref System.Nullable<int> doc2, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Year", DbType="NVarChar(4)")] string year)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cost1, cost2, sale, buy, doc1, doc2, year);
			cost1 = ((System.Nullable<int>)(result.GetParameterValue(0)));
			cost2 = ((System.Nullable<int>)(result.GetParameterValue(1)));
			sale = ((System.Nullable<int>)(result.GetParameterValue(2)));
			buy = ((System.Nullable<int>)(result.GetParameterValue(3)));
			doc1 = ((System.Nullable<int>)(result.GetParameterValue(4)));
			doc2 = ((System.Nullable<int>)(result.GetParameterValue(5)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AlarmDocument")]
		public ISingleResult<Document> AlarmDocument([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Today", DbType="NVarChar(10)")] string today, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Az", DbType="Int")] System.Nullable<int> az, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Ta", DbType="Int")] System.Nullable<int> ta)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), today, az, ta);
			return ((ISingleResult<Document>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAlarmSetting")]
		public int GetAlarmSetting([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Alm1", DbType="Int")] ref System.Nullable<int> alm1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Alm2", DbType="Int")] ref System.Nullable<int> alm2)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), alm1, alm2);
			alm1 = ((System.Nullable<int>)(result.GetParameterValue(0)));
			alm2 = ((System.Nullable<int>)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Setting")]
	public sealed partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SettingId;
		
		private string _CompanyName;
		
		private string _FactorAddress;
		
		private string _FactorTel;
		
		private string _InvoiceAddress;
		
		private string _InvoiceTel;
		
		private string _SmsUser;
		
		private string _SmsPass;
		
		private string _SmsSender;
		
		private string _UserMobile;
		
		private System.Nullable<bool> _BankSend;
		
		private System.Nullable<bool> _FactorSend;
		
		private System.Nullable<int> _Alarm1;
		
		private System.Nullable<int> _Alarm2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSettingIdChanging(int value);
    partial void OnSettingIdChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnFactorAddressChanging(string value);
    partial void OnFactorAddressChanged();
    partial void OnFactorTelChanging(string value);
    partial void OnFactorTelChanged();
    partial void OnInvoiceAddressChanging(string value);
    partial void OnInvoiceAddressChanged();
    partial void OnInvoiceTelChanging(string value);
    partial void OnInvoiceTelChanged();
    partial void OnSmsUserChanging(string value);
    partial void OnSmsUserChanged();
    partial void OnSmsPassChanging(string value);
    partial void OnSmsPassChanged();
    partial void OnSmsSenderChanging(string value);
    partial void OnSmsSenderChanged();
    partial void OnUserMobileChanging(string value);
    partial void OnUserMobileChanged();
    partial void OnBankSendChanging(System.Nullable<bool> value);
    partial void OnBankSendChanged();
    partial void OnFactorSendChanging(System.Nullable<bool> value);
    partial void OnFactorSendChanged();
    partial void OnAlarm1Changing(System.Nullable<int> value);
    partial void OnAlarm1Changed();
    partial void OnAlarm2Changing(System.Nullable<int> value);
    partial void OnAlarm2Changed();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SettingId
		{
			get
			{
				return this._SettingId;
			}
			set
			{
				if ((this._SettingId != value))
				{
					this.OnSettingIdChanging(value);
					this.SendPropertyChanging();
					this._SettingId = value;
					this.SendPropertyChanged("SettingId");
					this.OnSettingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(100)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorAddress", DbType="NVarChar(MAX)")]
		public string FactorAddress
		{
			get
			{
				return this._FactorAddress;
			}
			set
			{
				if ((this._FactorAddress != value))
				{
					this.OnFactorAddressChanging(value);
					this.SendPropertyChanging();
					this._FactorAddress = value;
					this.SendPropertyChanged("FactorAddress");
					this.OnFactorAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorTel", DbType="NVarChar(20)")]
		public string FactorTel
		{
			get
			{
				return this._FactorTel;
			}
			set
			{
				if ((this._FactorTel != value))
				{
					this.OnFactorTelChanging(value);
					this.SendPropertyChanging();
					this._FactorTel = value;
					this.SendPropertyChanged("FactorTel");
					this.OnFactorTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceAddress", DbType="NVarChar(MAX)")]
		public string InvoiceAddress
		{
			get
			{
				return this._InvoiceAddress;
			}
			set
			{
				if ((this._InvoiceAddress != value))
				{
					this.OnInvoiceAddressChanging(value);
					this.SendPropertyChanging();
					this._InvoiceAddress = value;
					this.SendPropertyChanged("InvoiceAddress");
					this.OnInvoiceAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceTel", DbType="NVarChar(20)")]
		public string InvoiceTel
		{
			get
			{
				return this._InvoiceTel;
			}
			set
			{
				if ((this._InvoiceTel != value))
				{
					this.OnInvoiceTelChanging(value);
					this.SendPropertyChanging();
					this._InvoiceTel = value;
					this.SendPropertyChanged("InvoiceTel");
					this.OnInvoiceTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmsUser", DbType="NVarChar(20)")]
		public string SmsUser
		{
			get
			{
				return this._SmsUser;
			}
			set
			{
				if ((this._SmsUser != value))
				{
					this.OnSmsUserChanging(value);
					this.SendPropertyChanging();
					this._SmsUser = value;
					this.SendPropertyChanged("SmsUser");
					this.OnSmsUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmsPass", DbType="NVarChar(20)")]
		public string SmsPass
		{
			get
			{
				return this._SmsPass;
			}
			set
			{
				if ((this._SmsPass != value))
				{
					this.OnSmsPassChanging(value);
					this.SendPropertyChanging();
					this._SmsPass = value;
					this.SendPropertyChanged("SmsPass");
					this.OnSmsPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmsSender", DbType="NVarChar(20)")]
		public string SmsSender
		{
			get
			{
				return this._SmsSender;
			}
			set
			{
				if ((this._SmsSender != value))
				{
					this.OnSmsSenderChanging(value);
					this.SendPropertyChanging();
					this._SmsSender = value;
					this.SendPropertyChanged("SmsSender");
					this.OnSmsSenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserMobile", DbType="NVarChar(11)")]
		public string UserMobile
		{
			get
			{
				return this._UserMobile;
			}
			set
			{
				if ((this._UserMobile != value))
				{
					this.OnUserMobileChanging(value);
					this.SendPropertyChanging();
					this._UserMobile = value;
					this.SendPropertyChanged("UserMobile");
					this.OnUserMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankSend", DbType="Bit")]
		public System.Nullable<bool> BankSend
		{
			get
			{
				return this._BankSend;
			}
			set
			{
				if ((this._BankSend != value))
				{
					this.OnBankSendChanging(value);
					this.SendPropertyChanging();
					this._BankSend = value;
					this.SendPropertyChanged("BankSend");
					this.OnBankSendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorSend", DbType="Bit")]
		public System.Nullable<bool> FactorSend
		{
			get
			{
				return this._FactorSend;
			}
			set
			{
				if ((this._FactorSend != value))
				{
					this.OnFactorSendChanging(value);
					this.SendPropertyChanging();
					this._FactorSend = value;
					this.SendPropertyChanged("FactorSend");
					this.OnFactorSendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alarm1", DbType="Int")]
		public System.Nullable<int> Alarm1
		{
			get
			{
				return this._Alarm1;
			}
			set
			{
				if ((this._Alarm1 != value))
				{
					this.OnAlarm1Changing(value);
					this.SendPropertyChanging();
					this._Alarm1 = value;
					this.SendPropertyChanged("Alarm1");
					this.OnAlarm1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alarm2", DbType="Int")]
		public System.Nullable<int> Alarm2
		{
			get
			{
				return this._Alarm2;
			}
			set
			{
				if ((this._Alarm2 != value))
				{
					this.OnAlarm2Changing(value);
					this.SendPropertyChanging();
					this._Alarm2 = value;
					this.SendPropertyChanged("Alarm2");
					this.OnAlarm2Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public sealed partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private string _RoleName;
		
		private System.Nullable<bool> _DepotPermission;
		
		private System.Nullable<bool> _BankPermission;
		
		private System.Nullable<bool> _PersonPermission;
		
		private System.Nullable<bool> _FactorPermission;
		
		private System.Nullable<bool> _SettingPermission;
		
		private System.Nullable<bool> _UserPermission;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnDepotPermissionChanging(System.Nullable<bool> value);
    partial void OnDepotPermissionChanged();
    partial void OnBankPermissionChanging(System.Nullable<bool> value);
    partial void OnBankPermissionChanged();
    partial void OnPersonPermissionChanging(System.Nullable<bool> value);
    partial void OnPersonPermissionChanged();
    partial void OnFactorPermissionChanging(System.Nullable<bool> value);
    partial void OnFactorPermissionChanged();
    partial void OnSettingPermissionChanging(System.Nullable<bool> value);
    partial void OnSettingPermissionChanged();
    partial void OnUserPermissionChanging(System.Nullable<bool> value);
    partial void OnUserPermissionChanged();
    #endregion
		
		public Role()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(100)")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepotPermission", DbType="Bit")]
		public System.Nullable<bool> DepotPermission
		{
			get
			{
				return this._DepotPermission;
			}
			set
			{
				if ((this._DepotPermission != value))
				{
					this.OnDepotPermissionChanging(value);
					this.SendPropertyChanging();
					this._DepotPermission = value;
					this.SendPropertyChanged("DepotPermission");
					this.OnDepotPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankPermission", DbType="Bit")]
		public System.Nullable<bool> BankPermission
		{
			get
			{
				return this._BankPermission;
			}
			set
			{
				if ((this._BankPermission != value))
				{
					this.OnBankPermissionChanging(value);
					this.SendPropertyChanging();
					this._BankPermission = value;
					this.SendPropertyChanged("BankPermission");
					this.OnBankPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonPermission", DbType="Bit")]
		public System.Nullable<bool> PersonPermission
		{
			get
			{
				return this._PersonPermission;
			}
			set
			{
				if ((this._PersonPermission != value))
				{
					this.OnPersonPermissionChanging(value);
					this.SendPropertyChanging();
					this._PersonPermission = value;
					this.SendPropertyChanged("PersonPermission");
					this.OnPersonPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorPermission", DbType="Bit")]
		public System.Nullable<bool> FactorPermission
		{
			get
			{
				return this._FactorPermission;
			}
			set
			{
				if ((this._FactorPermission != value))
				{
					this.OnFactorPermissionChanging(value);
					this.SendPropertyChanging();
					this._FactorPermission = value;
					this.SendPropertyChanged("FactorPermission");
					this.OnFactorPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingPermission", DbType="Bit")]
		public System.Nullable<bool> SettingPermission
		{
			get
			{
				return this._SettingPermission;
			}
			set
			{
				if ((this._SettingPermission != value))
				{
					this.OnSettingPermissionChanging(value);
					this.SendPropertyChanging();
					this._SettingPermission = value;
					this.SendPropertyChanged("SettingPermission");
					this.OnSettingPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPermission", DbType="Bit")]
		public System.Nullable<bool> UserPermission
		{
			get
			{
				return this._UserPermission;
			}
			set
			{
				if ((this._UserPermission != value))
				{
					this.OnUserPermissionChanging(value);
					this.SendPropertyChanging();
					this._UserPermission = value;
					this.SendPropertyChanged("UserPermission");
					this.OnUserPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public sealed partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private System.Nullable<int> _RoleId;
		
		private string _LoginUser;
		
		private string _LoginPass;
		
		private EntitySet<Log> _Logs;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(System.Nullable<int> value);
    partial void OnRoleIdChanged();
    partial void OnLoginUserChanging(string value);
    partial void OnLoginUserChanged();
    partial void OnLoginPassChanging(string value);
    partial void OnLoginPassChanged();
    #endregion
		
		public User()
		{
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int")]
		public System.Nullable<int> RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginUser", DbType="NVarChar(20)")]
		public string LoginUser
		{
			get
			{
				return this._LoginUser;
			}
			set
			{
				if ((this._LoginUser != value))
				{
					this.OnLoginUserChanging(value);
					this.SendPropertyChanging();
					this._LoginUser = value;
					this.SendPropertyChanged("LoginUser");
					this.OnLoginUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginPass", DbType="NVarChar(20)")]
		public string LoginPass
		{
			get
			{
				return this._LoginPass;
			}
			set
			{
				if ((this._LoginPass != value))
				{
					this.OnLoginPassChanging(value);
					this.SendPropertyChanging();
					this._LoginPass = value;
					this.SendPropertyChanged("LoginPass");
					this.OnLoginPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Log", Storage="_Logs", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Logs")]
	public sealed partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogId;
		
		private System.Nullable<int> _UserId;
		
		private string _LogIn;
		
		private string _LogOut;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIdChanging(int value);
    partial void OnLogIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnLogInChanging(string value);
    partial void OnLogInChanged();
    partial void OnLogOutChanging(string value);
    partial void OnLogOutChanged();
    #endregion
		
		public Log()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogId
		{
			get
			{
				return this._LogId;
			}
			set
			{
				if ((this._LogId != value))
				{
					this.OnLogIdChanging(value);
					this.SendPropertyChanging();
					this._LogId = value;
					this.SendPropertyChanged("LogId");
					this.OnLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogIn", DbType="NVarChar(30)")]
		public string LogIn
		{
			get
			{
				return this._LogIn;
			}
			set
			{
				if ((this._LogIn != value))
				{
					this.OnLogInChanging(value);
					this.SendPropertyChanging();
					this._LogIn = value;
					this.SendPropertyChanged("LogIn");
					this.OnLogInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogOut", DbType="NVarChar(30)")]
		public string LogOut
		{
			get
			{
				return this._LogOut;
			}
			set
			{
				if ((this._LogOut != value))
				{
					this.OnLogOutChanging(value);
					this.SendPropertyChanging();
					this._LogOut = value;
					this.SendPropertyChanged("LogOut");
					this.OnLogOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Log", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Depot")]
	public sealed partial class Depot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepotId;
		
		private string _DepotName;
		
		private EntitySet<Stock> _Stocks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepotIdChanging(int value);
    partial void OnDepotIdChanged();
    partial void OnDepotNameChanging(string value);
    partial void OnDepotNameChanged();
    #endregion
		
		public Depot()
		{
			this._Stocks = new EntitySet<Stock>(new Action<Stock>(this.attach_Stocks), new Action<Stock>(this.detach_Stocks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepotId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepotId
		{
			get
			{
				return this._DepotId;
			}
			set
			{
				if ((this._DepotId != value))
				{
					this.OnDepotIdChanging(value);
					this.SendPropertyChanging();
					this._DepotId = value;
					this.SendPropertyChanged("DepotId");
					this.OnDepotIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepotName", DbType="NVarChar(100)")]
		public string DepotName
		{
			get
			{
				return this._DepotName;
			}
			set
			{
				if ((this._DepotName != value))
				{
					this.OnDepotNameChanging(value);
					this.SendPropertyChanging();
					this._DepotName = value;
					this.SendPropertyChanged("DepotName");
					this.OnDepotNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Depot_Stock", Storage="_Stocks", ThisKey="DepotId", OtherKey="DepotId")]
		public EntitySet<Stock> Stocks
		{
			get
			{
				return this._Stocks;
			}
			set
			{
				this._Stocks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Depot = this;
		}
		
		private void detach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Depot = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
	public sealed partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupId;
		
		private string _GroupName;
		
		private string _GroupUnit1;
		
		private string _GroupUnit2;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnGroupUnit1Changing(string value);
    partial void OnGroupUnit1Changed();
    partial void OnGroupUnit2Changing(string value);
    partial void OnGroupUnit2Changed();
    #endregion
		
		public Group()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(100)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupUnit1", DbType="NVarChar(30)")]
		public string GroupUnit1
		{
			get
			{
				return this._GroupUnit1;
			}
			set
			{
				if ((this._GroupUnit1 != value))
				{
					this.OnGroupUnit1Changing(value);
					this.SendPropertyChanging();
					this._GroupUnit1 = value;
					this.SendPropertyChanged("GroupUnit1");
					this.OnGroupUnit1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupUnit2", DbType="NVarChar(30)")]
		public string GroupUnit2
		{
			get
			{
				return this._GroupUnit2;
			}
			set
			{
				if ((this._GroupUnit2 != value))
				{
					this.OnGroupUnit2Changing(value);
					this.SendPropertyChanging();
					this._GroupUnit2 = value;
					this.SendPropertyChanged("GroupUnit2");
					this.OnGroupUnit2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Product", Storage="_Products", ThisKey="GroupId", OtherKey="GroupId")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
	public sealed partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private System.Nullable<int> _GroupId;
		
		private string _ProductName;
		
		private System.Nullable<double> _ProductSize;
		
		private System.Nullable<int> _ProductDefaultPrice;
		
		private string _ProductDes;
		
		private System.Nullable<int> _ProductAlarm;
		
		private EntitySet<Stock> _Stocks;
		
		private EntitySet<Detail> _Details;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnGroupIdChanging(System.Nullable<int> value);
    partial void OnGroupIdChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnProductSizeChanging(System.Nullable<double> value);
    partial void OnProductSizeChanged();
    partial void OnProductDefaultPriceChanging(System.Nullable<int> value);
    partial void OnProductDefaultPriceChanged();
    partial void OnProductDesChanging(string value);
    partial void OnProductDesChanged();
    partial void OnProductAlarmChanging(System.Nullable<int> value);
    partial void OnProductAlarmChanged();
    #endregion
		
		public Product()
		{
			this._Stocks = new EntitySet<Stock>(new Action<Stock>(this.attach_Stocks), new Action<Stock>(this.detach_Stocks));
			this._Details = new EntitySet<Detail>(new Action<Detail>(this.attach_Details), new Action<Detail>(this.detach_Details));
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int")]
		public System.Nullable<int> GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="NVarChar(200)")]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductSize", DbType="Float")]
		public System.Nullable<double> ProductSize
		{
			get
			{
				return this._ProductSize;
			}
			set
			{
				if ((this._ProductSize != value))
				{
					this.OnProductSizeChanging(value);
					this.SendPropertyChanging();
					this._ProductSize = value;
					this.SendPropertyChanged("ProductSize");
					this.OnProductSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductDefaultPrice", DbType="Int")]
		public System.Nullable<int> ProductDefaultPrice
		{
			get
			{
				return this._ProductDefaultPrice;
			}
			set
			{
				if ((this._ProductDefaultPrice != value))
				{
					this.OnProductDefaultPriceChanging(value);
					this.SendPropertyChanging();
					this._ProductDefaultPrice = value;
					this.SendPropertyChanged("ProductDefaultPrice");
					this.OnProductDefaultPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductDes", DbType="NVarChar(MAX)")]
		public string ProductDes
		{
			get
			{
				return this._ProductDes;
			}
			set
			{
				if ((this._ProductDes != value))
				{
					this.OnProductDesChanging(value);
					this.SendPropertyChanging();
					this._ProductDes = value;
					this.SendPropertyChanged("ProductDes");
					this.OnProductDesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductAlarm", DbType="Int")]
		public System.Nullable<int> ProductAlarm
		{
			get
			{
				return this._ProductAlarm;
			}
			set
			{
				if ((this._ProductAlarm != value))
				{
					this.OnProductAlarmChanging(value);
					this.SendPropertyChanging();
					this._ProductAlarm = value;
					this.SendPropertyChanged("ProductAlarm");
					this.OnProductAlarmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Stock", Storage="_Stocks", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<Stock> Stocks
		{
			get
			{
				return this._Stocks;
			}
			set
			{
				this._Stocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Detail", Storage="_Details", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<Detail> Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				this._Details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Product", Storage="_Group", ThisKey="GroupId", OtherKey="GroupId", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._GroupId = value.GroupId;
					}
					else
					{
						this._GroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Details(Detail entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Details(Detail entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.People")]
	public sealed partial class People : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PersonId;
		
		private string _PersonName;
		
		private string _PersonTel;
		
		private string _PersonMobile;
		
		private System.Nullable<int> _PersonDebtor;
		
		private System.Nullable<int> _PersonCreditor;
		
		private EntitySet<Factor> _Factors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIdChanging(int value);
    partial void OnPersonIdChanged();
    partial void OnPersonNameChanging(string value);
    partial void OnPersonNameChanged();
    partial void OnPersonTelChanging(string value);
    partial void OnPersonTelChanged();
    partial void OnPersonMobileChanging(string value);
    partial void OnPersonMobileChanged();
    partial void OnPersonDebtorChanging(System.Nullable<int> value);
    partial void OnPersonDebtorChanged();
    partial void OnPersonCreditorChanging(System.Nullable<int> value);
    partial void OnPersonCreditorChanged();
    #endregion
		
		public People()
		{
			this._Factors = new EntitySet<Factor>(new Action<Factor>(this.attach_Factors), new Action<Factor>(this.detach_Factors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonName", DbType="NVarChar(100)")]
		public string PersonName
		{
			get
			{
				return this._PersonName;
			}
			set
			{
				if ((this._PersonName != value))
				{
					this.OnPersonNameChanging(value);
					this.SendPropertyChanging();
					this._PersonName = value;
					this.SendPropertyChanged("PersonName");
					this.OnPersonNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonTel", DbType="NVarChar(20)")]
		public string PersonTel
		{
			get
			{
				return this._PersonTel;
			}
			set
			{
				if ((this._PersonTel != value))
				{
					this.OnPersonTelChanging(value);
					this.SendPropertyChanging();
					this._PersonTel = value;
					this.SendPropertyChanged("PersonTel");
					this.OnPersonTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonMobile", DbType="NVarChar(11)")]
		public string PersonMobile
		{
			get
			{
				return this._PersonMobile;
			}
			set
			{
				if ((this._PersonMobile != value))
				{
					this.OnPersonMobileChanging(value);
					this.SendPropertyChanging();
					this._PersonMobile = value;
					this.SendPropertyChanged("PersonMobile");
					this.OnPersonMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonDebtor", DbType="Int")]
		public System.Nullable<int> PersonDebtor
		{
			get
			{
				return this._PersonDebtor;
			}
			set
			{
				if ((this._PersonDebtor != value))
				{
					this.OnPersonDebtorChanging(value);
					this.SendPropertyChanging();
					this._PersonDebtor = value;
					this.SendPropertyChanged("PersonDebtor");
					this.OnPersonDebtorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonCreditor", DbType="Int")]
		public System.Nullable<int> PersonCreditor
		{
			get
			{
				return this._PersonCreditor;
			}
			set
			{
				if ((this._PersonCreditor != value))
				{
					this.OnPersonCreditorChanging(value);
					this.SendPropertyChanging();
					this._PersonCreditor = value;
					this.SendPropertyChanged("PersonCreditor");
					this.OnPersonCreditorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Factor", Storage="_Factors", ThisKey="PersonId", OtherKey="PersonId")]
		public EntitySet<Factor> Factors
		{
			get
			{
				return this._Factors;
			}
			set
			{
				this._Factors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Factors(Factor entity)
		{
			this.SendPropertyChanging();
			entity.People = this;
		}
		
		private void detach_Factors(Factor entity)
		{
			this.SendPropertyChanging();
			entity.People = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CostGroups")]
	public sealed partial class CostGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CostGroupId;
		
		private System.Nullable<bool> _CostGroupType;
		
		private System.Nullable<bool> _CostStatic;
		
		private string _CostGroupName;
		
		private string _CostGroupDes;
		
		private EntitySet<Book> _Books;
		
		private EntitySet<Document> _Documents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCostGroupIdChanging(int value);
    partial void OnCostGroupIdChanged();
    partial void OnCostGroupTypeChanging(System.Nullable<bool> value);
    partial void OnCostGroupTypeChanged();
    partial void OnCostStaticChanging(System.Nullable<bool> value);
    partial void OnCostStaticChanged();
    partial void OnCostGroupNameChanging(string value);
    partial void OnCostGroupNameChanged();
    partial void OnCostGroupDesChanging(string value);
    partial void OnCostGroupDesChanged();
    #endregion
		
		public CostGroup()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostGroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CostGroupId
		{
			get
			{
				return this._CostGroupId;
			}
			set
			{
				if ((this._CostGroupId != value))
				{
					this.OnCostGroupIdChanging(value);
					this.SendPropertyChanging();
					this._CostGroupId = value;
					this.SendPropertyChanged("CostGroupId");
					this.OnCostGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostGroupType", DbType="Bit")]
		public System.Nullable<bool> CostGroupType
		{
			get
			{
				return this._CostGroupType;
			}
			set
			{
				if ((this._CostGroupType != value))
				{
					this.OnCostGroupTypeChanging(value);
					this.SendPropertyChanging();
					this._CostGroupType = value;
					this.SendPropertyChanged("CostGroupType");
					this.OnCostGroupTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostStatic", DbType="Bit")]
		public System.Nullable<bool> CostStatic
		{
			get
			{
				return this._CostStatic;
			}
			set
			{
				if ((this._CostStatic != value))
				{
					this.OnCostStaticChanging(value);
					this.SendPropertyChanging();
					this._CostStatic = value;
					this.SendPropertyChanged("CostStatic");
					this.OnCostStaticChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostGroupName", DbType="NVarChar(100)")]
		public string CostGroupName
		{
			get
			{
				return this._CostGroupName;
			}
			set
			{
				if ((this._CostGroupName != value))
				{
					this.OnCostGroupNameChanging(value);
					this.SendPropertyChanging();
					this._CostGroupName = value;
					this.SendPropertyChanged("CostGroupName");
					this.OnCostGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostGroupDes", DbType="NVarChar(MAX)")]
		public string CostGroupDes
		{
			get
			{
				return this._CostGroupDes;
			}
			set
			{
				if ((this._CostGroupDes != value))
				{
					this.OnCostGroupDesChanging(value);
					this.SendPropertyChanging();
					this._CostGroupDes = value;
					this.SendPropertyChanged("CostGroupDes");
					this.OnCostGroupDesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostGroup_Book", Storage="_Books", ThisKey="CostGroupId", OtherKey="CostGroupId")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostGroup_Document", Storage="_Documents", ThisKey="CostGroupId", OtherKey="CostGroupId")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.CostGroup = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.CostGroup = null;
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.CostGroup = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.CostGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bank")]
	public sealed partial class Bank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BankId;
		
		private string _BankName;
		
		private string _BankNumber;
		
		private string _BankPerson;
		
		private System.Nullable<bool> _BankType;
		
		private EntitySet<Book> _Books;
		
		private EntitySet<Document> _Documents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBankIdChanging(int value);
    partial void OnBankIdChanged();
    partial void OnBankNameChanging(string value);
    partial void OnBankNameChanged();
    partial void OnBankNumberChanging(string value);
    partial void OnBankNumberChanged();
    partial void OnBankPersonChanging(string value);
    partial void OnBankPersonChanged();
    partial void OnBankTypeChanging(System.Nullable<bool> value);
    partial void OnBankTypeChanged();
    #endregion
		
		public Bank()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BankId
		{
			get
			{
				return this._BankId;
			}
			set
			{
				if ((this._BankId != value))
				{
					this.OnBankIdChanging(value);
					this.SendPropertyChanging();
					this._BankId = value;
					this.SendPropertyChanged("BankId");
					this.OnBankIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankName", DbType="NVarChar(100)")]
		public string BankName
		{
			get
			{
				return this._BankName;
			}
			set
			{
				if ((this._BankName != value))
				{
					this.OnBankNameChanging(value);
					this.SendPropertyChanging();
					this._BankName = value;
					this.SendPropertyChanged("BankName");
					this.OnBankNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankNumber", DbType="NVarChar(30)")]
		public string BankNumber
		{
			get
			{
				return this._BankNumber;
			}
			set
			{
				if ((this._BankNumber != value))
				{
					this.OnBankNumberChanging(value);
					this.SendPropertyChanging();
					this._BankNumber = value;
					this.SendPropertyChanged("BankNumber");
					this.OnBankNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankPerson", DbType="NVarChar(100)")]
		public string BankPerson
		{
			get
			{
				return this._BankPerson;
			}
			set
			{
				if ((this._BankPerson != value))
				{
					this.OnBankPersonChanging(value);
					this.SendPropertyChanging();
					this._BankPerson = value;
					this.SendPropertyChanged("BankPerson");
					this.OnBankPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankType", DbType="Bit")]
		public System.Nullable<bool> BankType
		{
			get
			{
				return this._BankType;
			}
			set
			{
				if ((this._BankType != value))
				{
					this.OnBankTypeChanging(value);
					this.SendPropertyChanging();
					this._BankType = value;
					this.SendPropertyChanged("BankType");
					this.OnBankTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_Book", Storage="_Books", ThisKey="BankId", OtherKey="BankId")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_Document", Storage="_Documents", ThisKey="BankId", OtherKey="BankId")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Bank = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Bank = null;
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Bank = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Bank = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Book")]
	public sealed partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookId;
		
		private System.Nullable<int> _BankId;
		
		private System.Nullable<int> _CostGroupId;
		
		private System.Nullable<int> _PersonId;
		
		private string _BookDate;
		
		private string _BookTime;
		
		private string _BookDes;
		
		private System.Nullable<int> _BookPrice;
		
		private EntityRef<Bank> _Bank;
		
		private EntityRef<CostGroup> _CostGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookIdChanging(int value);
    partial void OnBookIdChanged();
    partial void OnBankIdChanging(System.Nullable<int> value);
    partial void OnBankIdChanged();
    partial void OnCostGroupIdChanging(System.Nullable<int> value);
    partial void OnCostGroupIdChanged();
    partial void OnPersonIdChanging(System.Nullable<int> value);
    partial void OnPersonIdChanged();
    partial void OnBookDateChanging(string value);
    partial void OnBookDateChanged();
    partial void OnBookTimeChanging(string value);
    partial void OnBookTimeChanged();
    partial void OnBookDesChanging(string value);
    partial void OnBookDesChanged();
    partial void OnBookPriceChanging(System.Nullable<int> value);
    partial void OnBookPriceChanged();
    #endregion
		
		public Book()
		{
			this._Bank = default(EntityRef<Bank>);
			this._CostGroup = default(EntityRef<CostGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BookId
		{
			get
			{
				return this._BookId;
			}
			set
			{
				if ((this._BookId != value))
				{
					this.OnBookIdChanging(value);
					this.SendPropertyChanging();
					this._BookId = value;
					this.SendPropertyChanged("BookId");
					this.OnBookIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankId", DbType="Int")]
		public System.Nullable<int> BankId
		{
			get
			{
				return this._BankId;
			}
			set
			{
				if ((this._BankId != value))
				{
					if (this._Bank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankIdChanging(value);
					this.SendPropertyChanging();
					this._BankId = value;
					this.SendPropertyChanged("BankId");
					this.OnBankIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostGroupId", DbType="Int")]
		public System.Nullable<int> CostGroupId
		{
			get
			{
				return this._CostGroupId;
			}
			set
			{
				if ((this._CostGroupId != value))
				{
					if (this._CostGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostGroupIdChanging(value);
					this.SendPropertyChanging();
					this._CostGroupId = value;
					this.SendPropertyChanged("CostGroupId");
					this.OnCostGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonId", DbType="Int")]
		public System.Nullable<int> PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookDate", DbType="NVarChar(10)")]
		public string BookDate
		{
			get
			{
				return this._BookDate;
			}
			set
			{
				if ((this._BookDate != value))
				{
					this.OnBookDateChanging(value);
					this.SendPropertyChanging();
					this._BookDate = value;
					this.SendPropertyChanged("BookDate");
					this.OnBookDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookTime", DbType="NVarChar(10)")]
		public string BookTime
		{
			get
			{
				return this._BookTime;
			}
			set
			{
				if ((this._BookTime != value))
				{
					this.OnBookTimeChanging(value);
					this.SendPropertyChanging();
					this._BookTime = value;
					this.SendPropertyChanged("BookTime");
					this.OnBookTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookDes", DbType="NVarChar(200)")]
		public string BookDes
		{
			get
			{
				return this._BookDes;
			}
			set
			{
				if ((this._BookDes != value))
				{
					this.OnBookDesChanging(value);
					this.SendPropertyChanging();
					this._BookDes = value;
					this.SendPropertyChanged("BookDes");
					this.OnBookDesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookPrice", DbType="Int")]
		public System.Nullable<int> BookPrice
		{
			get
			{
				return this._BookPrice;
			}
			set
			{
				if ((this._BookPrice != value))
				{
					this.OnBookPriceChanging(value);
					this.SendPropertyChanging();
					this._BookPrice = value;
					this.SendPropertyChanged("BookPrice");
					this.OnBookPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_Book", Storage="_Bank", ThisKey="BankId", OtherKey="BankId", IsForeignKey=true)]
		public Bank Bank
		{
			get
			{
				return this._Bank.Entity;
			}
			set
			{
				Bank previousValue = this._Bank.Entity;
				if (((previousValue != value) 
							|| (this._Bank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bank.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Bank.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._BankId = value.BankId;
					}
					else
					{
						this._BankId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bank");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostGroup_Book", Storage="_CostGroup", ThisKey="CostGroupId", OtherKey="CostGroupId", IsForeignKey=true)]
		public CostGroup CostGroup
		{
			get
			{
				return this._CostGroup.Entity;
			}
			set
			{
				CostGroup previousValue = this._CostGroup.Entity;
				if (((previousValue != value) 
							|| (this._CostGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostGroup.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._CostGroup.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._CostGroupId = value.CostGroupId;
					}
					else
					{
						this._CostGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CostGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Documents")]
	public sealed partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentId;
		
		private System.Nullable<int> _BankId;
		
		private System.Nullable<int> _CostGroupId;
		
		private System.Nullable<int> _PersonId;
		
		private string _DocumentDate1;
		
		private string _DocumentDate2;
		
		private string _DocumentNumber;
		
		private string _DocumentDes;
		
		private System.Nullable<int> _DocumentPrice;
		
		private System.Nullable<bool> _DocumentOk;
		
		private EntityRef<Bank> _Bank;
		
		private EntityRef<CostGroup> _CostGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentIdChanging(int value);
    partial void OnDocumentIdChanged();
    partial void OnBankIdChanging(System.Nullable<int> value);
    partial void OnBankIdChanged();
    partial void OnCostGroupIdChanging(System.Nullable<int> value);
    partial void OnCostGroupIdChanged();
    partial void OnPersonIdChanging(System.Nullable<int> value);
    partial void OnPersonIdChanged();
    partial void OnDocumentDate1Changing(string value);
    partial void OnDocumentDate1Changed();
    partial void OnDocumentDate2Changing(string value);
    partial void OnDocumentDate2Changed();
    partial void OnDocumentNumberChanging(string value);
    partial void OnDocumentNumberChanged();
    partial void OnDocumentDesChanging(string value);
    partial void OnDocumentDesChanged();
    partial void OnDocumentPriceChanging(System.Nullable<int> value);
    partial void OnDocumentPriceChanged();
    partial void OnDocumentOkChanging(System.Nullable<bool> value);
    partial void OnDocumentOkChanged();
    #endregion
		
		public Document()
		{
			this._Bank = default(EntityRef<Bank>);
			this._CostGroup = default(EntityRef<CostGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocumentId
		{
			get
			{
				return this._DocumentId;
			}
			set
			{
				if ((this._DocumentId != value))
				{
					this.OnDocumentIdChanging(value);
					this.SendPropertyChanging();
					this._DocumentId = value;
					this.SendPropertyChanged("DocumentId");
					this.OnDocumentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankId", DbType="Int")]
		public System.Nullable<int> BankId
		{
			get
			{
				return this._BankId;
			}
			set
			{
				if ((this._BankId != value))
				{
					if (this._Bank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankIdChanging(value);
					this.SendPropertyChanging();
					this._BankId = value;
					this.SendPropertyChanged("BankId");
					this.OnBankIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostGroupId", DbType="Int")]
		public System.Nullable<int> CostGroupId
		{
			get
			{
				return this._CostGroupId;
			}
			set
			{
				if ((this._CostGroupId != value))
				{
					if (this._CostGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostGroupIdChanging(value);
					this.SendPropertyChanging();
					this._CostGroupId = value;
					this.SendPropertyChanged("CostGroupId");
					this.OnCostGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonId", DbType="Int")]
		public System.Nullable<int> PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentDate1", DbType="NVarChar(10)")]
		public string DocumentDate1
		{
			get
			{
				return this._DocumentDate1;
			}
			set
			{
				if ((this._DocumentDate1 != value))
				{
					this.OnDocumentDate1Changing(value);
					this.SendPropertyChanging();
					this._DocumentDate1 = value;
					this.SendPropertyChanged("DocumentDate1");
					this.OnDocumentDate1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentDate2", DbType="NVarChar(10)")]
		public string DocumentDate2
		{
			get
			{
				return this._DocumentDate2;
			}
			set
			{
				if ((this._DocumentDate2 != value))
				{
					this.OnDocumentDate2Changing(value);
					this.SendPropertyChanging();
					this._DocumentDate2 = value;
					this.SendPropertyChanged("DocumentDate2");
					this.OnDocumentDate2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentNumber", DbType="NVarChar(30)")]
		public string DocumentNumber
		{
			get
			{
				return this._DocumentNumber;
			}
			set
			{
				if ((this._DocumentNumber != value))
				{
					this.OnDocumentNumberChanging(value);
					this.SendPropertyChanging();
					this._DocumentNumber = value;
					this.SendPropertyChanged("DocumentNumber");
					this.OnDocumentNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentDes", DbType="NVarChar(200)")]
		public string DocumentDes
		{
			get
			{
				return this._DocumentDes;
			}
			set
			{
				if ((this._DocumentDes != value))
				{
					this.OnDocumentDesChanging(value);
					this.SendPropertyChanging();
					this._DocumentDes = value;
					this.SendPropertyChanged("DocumentDes");
					this.OnDocumentDesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentPrice", DbType="Int")]
		public System.Nullable<int> DocumentPrice
		{
			get
			{
				return this._DocumentPrice;
			}
			set
			{
				if ((this._DocumentPrice != value))
				{
					this.OnDocumentPriceChanging(value);
					this.SendPropertyChanging();
					this._DocumentPrice = value;
					this.SendPropertyChanged("DocumentPrice");
					this.OnDocumentPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentOk", DbType="Bit")]
		public System.Nullable<bool> DocumentOk
		{
			get
			{
				return this._DocumentOk;
			}
			set
			{
				if ((this._DocumentOk != value))
				{
					this.OnDocumentOkChanging(value);
					this.SendPropertyChanging();
					this._DocumentOk = value;
					this.SendPropertyChanged("DocumentOk");
					this.OnDocumentOkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_Document", Storage="_Bank", ThisKey="BankId", OtherKey="BankId", IsForeignKey=true)]
		public Bank Bank
		{
			get
			{
				return this._Bank.Entity;
			}
			set
			{
				Bank previousValue = this._Bank.Entity;
				if (((previousValue != value) 
							|| (this._Bank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bank.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Bank.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._BankId = value.BankId;
					}
					else
					{
						this._BankId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bank");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostGroup_Document", Storage="_CostGroup", ThisKey="CostGroupId", OtherKey="CostGroupId", IsForeignKey=true)]
		public CostGroup CostGroup
		{
			get
			{
				return this._CostGroup.Entity;
			}
			set
			{
				CostGroup previousValue = this._CostGroup.Entity;
				if (((previousValue != value) 
							|| (this._CostGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostGroup.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._CostGroup.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._CostGroupId = value.CostGroupId;
					}
					else
					{
						this._CostGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CostGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tax")]
	public sealed partial class Tax : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaxId;
		
		private System.Nullable<double> _TaxBuy;
		
		private System.Nullable<double> _TaxSale;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaxIdChanging(int value);
    partial void OnTaxIdChanged();
    partial void OnTaxBuyChanging(System.Nullable<double> value);
    partial void OnTaxBuyChanged();
    partial void OnTaxSaleChanging(System.Nullable<double> value);
    partial void OnTaxSaleChanged();
    #endregion
		
		public Tax()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaxId
		{
			get
			{
				return this._TaxId;
			}
			set
			{
				if ((this._TaxId != value))
				{
					this.OnTaxIdChanging(value);
					this.SendPropertyChanging();
					this._TaxId = value;
					this.SendPropertyChanged("TaxId");
					this.OnTaxIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxBuy", DbType="Float")]
		public System.Nullable<double> TaxBuy
		{
			get
			{
				return this._TaxBuy;
			}
			set
			{
				if ((this._TaxBuy != value))
				{
					this.OnTaxBuyChanging(value);
					this.SendPropertyChanging();
					this._TaxBuy = value;
					this.SendPropertyChanged("TaxBuy");
					this.OnTaxBuyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxSale", DbType="Float")]
		public System.Nullable<double> TaxSale
		{
			get
			{
				return this._TaxSale;
			}
			set
			{
				if ((this._TaxSale != value))
				{
					this.OnTaxSaleChanging(value);
					this.SendPropertyChanging();
					this._TaxSale = value;
					this.SendPropertyChanged("TaxSale");
					this.OnTaxSaleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stocks")]
	public sealed partial class Stock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockId;
		
		private System.Nullable<int> _FactorId;
		
		private System.Nullable<int> _DepotId;
		
		private System.Nullable<int> _ProductId;
		
		private string _StockDate;
		
		private string _StockDes;
		
		private System.Nullable<int> _StockIn;
		
		private System.Nullable<int> _StockOut;
		
		private EntityRef<Depot> _Depot;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockIdChanging(int value);
    partial void OnStockIdChanged();
    partial void OnFactorIdChanging(System.Nullable<int> value);
    partial void OnFactorIdChanged();
    partial void OnDepotIdChanging(System.Nullable<int> value);
    partial void OnDepotIdChanged();
    partial void OnProductIdChanging(System.Nullable<int> value);
    partial void OnProductIdChanged();
    partial void OnStockDateChanging(string value);
    partial void OnStockDateChanged();
    partial void OnStockDesChanging(string value);
    partial void OnStockDesChanged();
    partial void OnStockInChanging(System.Nullable<int> value);
    partial void OnStockInChanged();
    partial void OnStockOutChanging(System.Nullable<int> value);
    partial void OnStockOutChanged();
    #endregion
		
		public Stock()
		{
			this._Depot = default(EntityRef<Depot>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StockId
		{
			get
			{
				return this._StockId;
			}
			set
			{
				if ((this._StockId != value))
				{
					this.OnStockIdChanging(value);
					this.SendPropertyChanging();
					this._StockId = value;
					this.SendPropertyChanged("StockId");
					this.OnStockIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorId", DbType="Int")]
		public System.Nullable<int> FactorId
		{
			get
			{
				return this._FactorId;
			}
			set
			{
				if ((this._FactorId != value))
				{
					this.OnFactorIdChanging(value);
					this.SendPropertyChanging();
					this._FactorId = value;
					this.SendPropertyChanged("FactorId");
					this.OnFactorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepotId", DbType="Int")]
		public System.Nullable<int> DepotId
		{
			get
			{
				return this._DepotId;
			}
			set
			{
				if ((this._DepotId != value))
				{
					if (this._Depot.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepotIdChanging(value);
					this.SendPropertyChanging();
					this._DepotId = value;
					this.SendPropertyChanged("DepotId");
					this.OnDepotIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int")]
		public System.Nullable<int> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockDate", DbType="NVarChar(10)")]
		public string StockDate
		{
			get
			{
				return this._StockDate;
			}
			set
			{
				if ((this._StockDate != value))
				{
					this.OnStockDateChanging(value);
					this.SendPropertyChanging();
					this._StockDate = value;
					this.SendPropertyChanged("StockDate");
					this.OnStockDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockDes", DbType="NVarChar(100)")]
		public string StockDes
		{
			get
			{
				return this._StockDes;
			}
			set
			{
				if ((this._StockDes != value))
				{
					this.OnStockDesChanging(value);
					this.SendPropertyChanging();
					this._StockDes = value;
					this.SendPropertyChanged("StockDes");
					this.OnStockDesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockIn", DbType="Int")]
		public System.Nullable<int> StockIn
		{
			get
			{
				return this._StockIn;
			}
			set
			{
				if ((this._StockIn != value))
				{
					this.OnStockInChanging(value);
					this.SendPropertyChanging();
					this._StockIn = value;
					this.SendPropertyChanged("StockIn");
					this.OnStockInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockOut", DbType="Int")]
		public System.Nullable<int> StockOut
		{
			get
			{
				return this._StockOut;
			}
			set
			{
				if ((this._StockOut != value))
				{
					this.OnStockOutChanging(value);
					this.SendPropertyChanging();
					this._StockOut = value;
					this.SendPropertyChanged("StockOut");
					this.OnStockOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Depot_Stock", Storage="_Depot", ThisKey="DepotId", OtherKey="DepotId", IsForeignKey=true)]
		public Depot Depot
		{
			get
			{
				return this._Depot.Entity;
			}
			set
			{
				Depot previousValue = this._Depot.Entity;
				if (((previousValue != value) 
							|| (this._Depot.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Depot.Entity = null;
						previousValue.Stocks.Remove(this);
					}
					this._Depot.Entity = value;
					if ((value != null))
					{
						value.Stocks.Add(this);
						this._DepotId = value.DepotId;
					}
					else
					{
						this._DepotId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Depot");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Stock", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Stocks.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Stocks.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ViewStocks")]
	public sealed partial class ViewStock
	{
		
		private int _ProductId;
		
		private System.Nullable<int> _GroupId;
		
		private string _GroupName;
		
		private string _GroupUnit1;
		
		private string _GroupUnit2;
		
		private string _ProductName;
		
		private System.Nullable<double> _ProductSize;
		
		private System.Nullable<int> _ProductDefaultPrice;
		
		private System.Nullable<int> _ProductAlarm;
		
		private System.Nullable<int> _SumStockIn;
		
		private System.Nullable<int> _SumStockOut;
		
		private System.Nullable<int> _SumStocks;
		
		public ViewStock()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this._ProductId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int")]
		public System.Nullable<int> GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this._GroupId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(100)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this._GroupName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupUnit1", DbType="NVarChar(30)")]
		public string GroupUnit1
		{
			get
			{
				return this._GroupUnit1;
			}
			set
			{
				if ((this._GroupUnit1 != value))
				{
					this._GroupUnit1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupUnit2", DbType="NVarChar(30)")]
		public string GroupUnit2
		{
			get
			{
				return this._GroupUnit2;
			}
			set
			{
				if ((this._GroupUnit2 != value))
				{
					this._GroupUnit2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="NVarChar(200)")]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this._ProductName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductSize", DbType="Float")]
		public System.Nullable<double> ProductSize
		{
			get
			{
				return this._ProductSize;
			}
			set
			{
				if ((this._ProductSize != value))
				{
					this._ProductSize = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductDefaultPrice", DbType="Int")]
		public System.Nullable<int> ProductDefaultPrice
		{
			get
			{
				return this._ProductDefaultPrice;
			}
			set
			{
				if ((this._ProductDefaultPrice != value))
				{
					this._ProductDefaultPrice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductAlarm", DbType="Int")]
		public System.Nullable<int> ProductAlarm
		{
			get
			{
				return this._ProductAlarm;
			}
			set
			{
				if ((this._ProductAlarm != value))
				{
					this._ProductAlarm = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SumStockIn", DbType="Int")]
		public System.Nullable<int> SumStockIn
		{
			get
			{
				return this._SumStockIn;
			}
			set
			{
				if ((this._SumStockIn != value))
				{
					this._SumStockIn = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SumStockOut", DbType="Int")]
		public System.Nullable<int> SumStockOut
		{
			get
			{
				return this._SumStockOut;
			}
			set
			{
				if ((this._SumStockOut != value))
				{
					this._SumStockOut = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SumStocks", DbType="Int")]
		public System.Nullable<int> SumStocks
		{
			get
			{
				return this._SumStocks;
			}
			set
			{
				if ((this._SumStocks != value))
				{
					this._SumStocks = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Factors")]
	public sealed partial class Factor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FactorId;
		
		private System.Nullable<int> _PersonId;
		
		private System.Nullable<bool> _FactorType;
		
		private string _FactorNumber;
		
		private string _FactorDate;
		
		private System.Nullable<int> _FactorPrice;
		
		private System.Nullable<double> _FactorDefaultTax;
		
		private System.Nullable<int> _FactorTaxPrice;
		
		private System.Nullable<int> _FactorServicePrice;
		
		private System.Nullable<int> _FactorCutPrice;
		
		private System.Nullable<int> _FactorSumPrice;
		
		private EntitySet<Detail> _Details;
		
		private EntityRef<People> _People;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFactorIdChanging(int value);
    partial void OnFactorIdChanged();
    partial void OnPersonIdChanging(System.Nullable<int> value);
    partial void OnPersonIdChanged();
    partial void OnFactorTypeChanging(System.Nullable<bool> value);
    partial void OnFactorTypeChanged();
    partial void OnFactorNumberChanging(string value);
    partial void OnFactorNumberChanged();
    partial void OnFactorDateChanging(string value);
    partial void OnFactorDateChanged();
    partial void OnFactorPriceChanging(System.Nullable<int> value);
    partial void OnFactorPriceChanged();
    partial void OnFactorDefaultTaxChanging(System.Nullable<double> value);
    partial void OnFactorDefaultTaxChanged();
    partial void OnFactorTaxPriceChanging(System.Nullable<int> value);
    partial void OnFactorTaxPriceChanged();
    partial void OnFactorServicePriceChanging(System.Nullable<int> value);
    partial void OnFactorServicePriceChanged();
    partial void OnFactorCutPriceChanging(System.Nullable<int> value);
    partial void OnFactorCutPriceChanged();
    partial void OnFactorSumPriceChanging(System.Nullable<int> value);
    partial void OnFactorSumPriceChanged();
    #endregion
		
		public Factor()
		{
			this._Details = new EntitySet<Detail>(new Action<Detail>(this.attach_Details), new Action<Detail>(this.detach_Details));
			this._People = default(EntityRef<People>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FactorId
		{
			get
			{
				return this._FactorId;
			}
			set
			{
				if ((this._FactorId != value))
				{
					this.OnFactorIdChanging(value);
					this.SendPropertyChanging();
					this._FactorId = value;
					this.SendPropertyChanged("FactorId");
					this.OnFactorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonId", DbType="Int")]
		public System.Nullable<int> PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._People.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorType", DbType="Bit")]
		public System.Nullable<bool> FactorType
		{
			get
			{
				return this._FactorType;
			}
			set
			{
				if ((this._FactorType != value))
				{
					this.OnFactorTypeChanging(value);
					this.SendPropertyChanging();
					this._FactorType = value;
					this.SendPropertyChanged("FactorType");
					this.OnFactorTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorNumber", DbType="NVarChar(10)")]
		public string FactorNumber
		{
			get
			{
				return this._FactorNumber;
			}
			set
			{
				if ((this._FactorNumber != value))
				{
					this.OnFactorNumberChanging(value);
					this.SendPropertyChanging();
					this._FactorNumber = value;
					this.SendPropertyChanged("FactorNumber");
					this.OnFactorNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorDate", DbType="NVarChar(10)")]
		public string FactorDate
		{
			get
			{
				return this._FactorDate;
			}
			set
			{
				if ((this._FactorDate != value))
				{
					this.OnFactorDateChanging(value);
					this.SendPropertyChanging();
					this._FactorDate = value;
					this.SendPropertyChanged("FactorDate");
					this.OnFactorDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorPrice", DbType="Int")]
		public System.Nullable<int> FactorPrice
		{
			get
			{
				return this._FactorPrice;
			}
			set
			{
				if ((this._FactorPrice != value))
				{
					this.OnFactorPriceChanging(value);
					this.SendPropertyChanging();
					this._FactorPrice = value;
					this.SendPropertyChanged("FactorPrice");
					this.OnFactorPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorDefaultTax", DbType="Float")]
		public System.Nullable<double> FactorDefaultTax
		{
			get
			{
				return this._FactorDefaultTax;
			}
			set
			{
				if ((this._FactorDefaultTax != value))
				{
					this.OnFactorDefaultTaxChanging(value);
					this.SendPropertyChanging();
					this._FactorDefaultTax = value;
					this.SendPropertyChanged("FactorDefaultTax");
					this.OnFactorDefaultTaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorTaxPrice", DbType="Int")]
		public System.Nullable<int> FactorTaxPrice
		{
			get
			{
				return this._FactorTaxPrice;
			}
			set
			{
				if ((this._FactorTaxPrice != value))
				{
					this.OnFactorTaxPriceChanging(value);
					this.SendPropertyChanging();
					this._FactorTaxPrice = value;
					this.SendPropertyChanged("FactorTaxPrice");
					this.OnFactorTaxPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorServicePrice", DbType="Int")]
		public System.Nullable<int> FactorServicePrice
		{
			get
			{
				return this._FactorServicePrice;
			}
			set
			{
				if ((this._FactorServicePrice != value))
				{
					this.OnFactorServicePriceChanging(value);
					this.SendPropertyChanging();
					this._FactorServicePrice = value;
					this.SendPropertyChanged("FactorServicePrice");
					this.OnFactorServicePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorCutPrice", DbType="Int")]
		public System.Nullable<int> FactorCutPrice
		{
			get
			{
				return this._FactorCutPrice;
			}
			set
			{
				if ((this._FactorCutPrice != value))
				{
					this.OnFactorCutPriceChanging(value);
					this.SendPropertyChanging();
					this._FactorCutPrice = value;
					this.SendPropertyChanged("FactorCutPrice");
					this.OnFactorCutPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorSumPrice", DbType="Int")]
		public System.Nullable<int> FactorSumPrice
		{
			get
			{
				return this._FactorSumPrice;
			}
			set
			{
				if ((this._FactorSumPrice != value))
				{
					this.OnFactorSumPriceChanging(value);
					this.SendPropertyChanging();
					this._FactorSumPrice = value;
					this.SendPropertyChanged("FactorSumPrice");
					this.OnFactorSumPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Factor_Detail", Storage="_Details", ThisKey="FactorId", OtherKey="FactorId")]
		public EntitySet<Detail> Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				this._Details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Factor", Storage="_People", ThisKey="PersonId", OtherKey="PersonId", IsForeignKey=true)]
		public People People
		{
			get
			{
				return this._People.Entity;
			}
			set
			{
				People previousValue = this._People.Entity;
				if (((previousValue != value) 
							|| (this._People.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._People.Entity = null;
						previousValue.Factors.Remove(this);
					}
					this._People.Entity = value;
					if ((value != null))
					{
						value.Factors.Add(this);
						this._PersonId = value.PersonId;
					}
					else
					{
						this._PersonId = default(Nullable<int>);
					}
					this.SendPropertyChanged("People");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Details(Detail entity)
		{
			this.SendPropertyChanging();
			entity.Factor = this;
		}
		
		private void detach_Details(Detail entity)
		{
			this.SendPropertyChanging();
			entity.Factor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Details")]
	public sealed partial class Detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DetailId;
		
		private System.Nullable<int> _FactorId;
		
		private System.Nullable<int> _ProductId;
		
		private System.Nullable<int> _DepotId;
		
		private System.Nullable<double> _DetailValue1;
		
		private System.Nullable<int> _DetailValue2;
		
		private System.Nullable<int> _DefaultPrice;
		
		private System.Nullable<int> _DetailPrice;
		
		private System.Nullable<bool> _DetailExit;
		
		private EntityRef<Factor> _Factor;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIdChanging(int value);
    partial void OnDetailIdChanged();
    partial void OnFactorIdChanging(System.Nullable<int> value);
    partial void OnFactorIdChanged();
    partial void OnProductIdChanging(System.Nullable<int> value);
    partial void OnProductIdChanged();
    partial void OnDepotIdChanging(System.Nullable<int> value);
    partial void OnDepotIdChanged();
    partial void OnDetailValue1Changing(System.Nullable<double> value);
    partial void OnDetailValue1Changed();
    partial void OnDetailValue2Changing(System.Nullable<int> value);
    partial void OnDetailValue2Changed();
    partial void OnDefaultPriceChanging(System.Nullable<int> value);
    partial void OnDefaultPriceChanged();
    partial void OnDetailPriceChanging(System.Nullable<int> value);
    partial void OnDetailPriceChanged();
    partial void OnDetailExitChanging(System.Nullable<bool> value);
    partial void OnDetailExitChanged();
    #endregion
		
		public Detail()
		{
			this._Factor = default(EntityRef<Factor>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DetailId
		{
			get
			{
				return this._DetailId;
			}
			set
			{
				if ((this._DetailId != value))
				{
					this.OnDetailIdChanging(value);
					this.SendPropertyChanging();
					this._DetailId = value;
					this.SendPropertyChanged("DetailId");
					this.OnDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorId", DbType="Int")]
		public System.Nullable<int> FactorId
		{
			get
			{
				return this._FactorId;
			}
			set
			{
				if ((this._FactorId != value))
				{
					if (this._Factor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactorIdChanging(value);
					this.SendPropertyChanging();
					this._FactorId = value;
					this.SendPropertyChanged("FactorId");
					this.OnFactorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int")]
		public System.Nullable<int> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepotId", DbType="Int")]
		public System.Nullable<int> DepotId
		{
			get
			{
				return this._DepotId;
			}
			set
			{
				if ((this._DepotId != value))
				{
					this.OnDepotIdChanging(value);
					this.SendPropertyChanging();
					this._DepotId = value;
					this.SendPropertyChanged("DepotId");
					this.OnDepotIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailValue1", DbType="Float")]
		public System.Nullable<double> DetailValue1
		{
			get
			{
				return this._DetailValue1;
			}
			set
			{
				if ((this._DetailValue1 != value))
				{
					this.OnDetailValue1Changing(value);
					this.SendPropertyChanging();
					this._DetailValue1 = value;
					this.SendPropertyChanged("DetailValue1");
					this.OnDetailValue1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailValue2", DbType="Int")]
		public System.Nullable<int> DetailValue2
		{
			get
			{
				return this._DetailValue2;
			}
			set
			{
				if ((this._DetailValue2 != value))
				{
					this.OnDetailValue2Changing(value);
					this.SendPropertyChanging();
					this._DetailValue2 = value;
					this.SendPropertyChanged("DetailValue2");
					this.OnDetailValue2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultPrice", DbType="Int")]
		public System.Nullable<int> DefaultPrice
		{
			get
			{
				return this._DefaultPrice;
			}
			set
			{
				if ((this._DefaultPrice != value))
				{
					this.OnDefaultPriceChanging(value);
					this.SendPropertyChanging();
					this._DefaultPrice = value;
					this.SendPropertyChanged("DefaultPrice");
					this.OnDefaultPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailPrice", DbType="Int")]
		public System.Nullable<int> DetailPrice
		{
			get
			{
				return this._DetailPrice;
			}
			set
			{
				if ((this._DetailPrice != value))
				{
					this.OnDetailPriceChanging(value);
					this.SendPropertyChanging();
					this._DetailPrice = value;
					this.SendPropertyChanged("DetailPrice");
					this.OnDetailPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailExit", DbType="Bit")]
		public System.Nullable<bool> DetailExit
		{
			get
			{
				return this._DetailExit;
			}
			set
			{
				if ((this._DetailExit != value))
				{
					this.OnDetailExitChanging(value);
					this.SendPropertyChanging();
					this._DetailExit = value;
					this.SendPropertyChanged("DetailExit");
					this.OnDetailExitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Factor_Detail", Storage="_Factor", ThisKey="FactorId", OtherKey="FactorId", IsForeignKey=true)]
		public Factor Factor
		{
			get
			{
				return this._Factor.Entity;
			}
			set
			{
				Factor previousValue = this._Factor.Entity;
				if (((previousValue != value) 
							|| (this._Factor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Factor.Entity = null;
						previousValue.Details.Remove(this);
					}
					this._Factor.Entity = value;
					if ((value != null))
					{
						value.Details.Add(this);
						this._FactorId = value.FactorId;
					}
					else
					{
						this._FactorId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Factor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Detail", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Details.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Details.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ViewFactorDetails")]
	public sealed partial class ViewFactorDetail
	{
		
		private int _DetailId;
		
		private System.Nullable<int> _FactorId;
		
		private System.Nullable<int> _ProductId;
		
		private System.Nullable<int> _DepotId;
		
		private System.Nullable<int> _PersonId;
		
		private System.Nullable<int> _GroupId;
		
		private System.Nullable<bool> _FactorType;
		
		private string _FactorNumber;
		
		private string _FactorDate;
		
		private System.Nullable<int> _FactorPrice;
		
		private System.Nullable<double> _FactorDefaultTax;
		
		private System.Nullable<int> _FactorTaxPrice;
		
		private System.Nullable<int> _FactorServicePrice;
		
		private System.Nullable<int> _FactorCutPrice;
		
		private System.Nullable<int> _FactorSumPrice;
		
		private System.Nullable<double> _DetailValue1;
		
		private System.Nullable<int> _DetailValue2;
		
		private System.Nullable<int> _DefaultPrice;
		
		private System.Nullable<int> _DetailPrice;
		
		private System.Nullable<bool> _DetailExit;
		
		private string _ProductName;
		
		private System.Nullable<double> _ProductSize;
		
		private System.Nullable<int> _ProductDefaultPrice;
		
		private string _GroupName;
		
		private string _GroupUnit1;
		
		private string _GroupUnit2;
		
		public ViewFactorDetail()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailId", DbType="Int NOT NULL")]
		public int DetailId
		{
			get
			{
				return this._DetailId;
			}
			set
			{
				if ((this._DetailId != value))
				{
					this._DetailId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorId", DbType="Int")]
		public System.Nullable<int> FactorId
		{
			get
			{
				return this._FactorId;
			}
			set
			{
				if ((this._FactorId != value))
				{
					this._FactorId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int")]
		public System.Nullable<int> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this._ProductId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepotId", DbType="Int")]
		public System.Nullable<int> DepotId
		{
			get
			{
				return this._DepotId;
			}
			set
			{
				if ((this._DepotId != value))
				{
					this._DepotId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonId", DbType="Int")]
		public System.Nullable<int> PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					this._PersonId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int")]
		public System.Nullable<int> GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this._GroupId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorType", DbType="Bit")]
		public System.Nullable<bool> FactorType
		{
			get
			{
				return this._FactorType;
			}
			set
			{
				if ((this._FactorType != value))
				{
					this._FactorType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorNumber", DbType="NVarChar(10)")]
		public string FactorNumber
		{
			get
			{
				return this._FactorNumber;
			}
			set
			{
				if ((this._FactorNumber != value))
				{
					this._FactorNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorDate", DbType="NVarChar(10)")]
		public string FactorDate
		{
			get
			{
				return this._FactorDate;
			}
			set
			{
				if ((this._FactorDate != value))
				{
					this._FactorDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorPrice", DbType="Int")]
		public System.Nullable<int> FactorPrice
		{
			get
			{
				return this._FactorPrice;
			}
			set
			{
				if ((this._FactorPrice != value))
				{
					this._FactorPrice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorDefaultTax", DbType="Float")]
		public System.Nullable<double> FactorDefaultTax
		{
			get
			{
				return this._FactorDefaultTax;
			}
			set
			{
				if ((this._FactorDefaultTax != value))
				{
					this._FactorDefaultTax = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorTaxPrice", DbType="Int")]
		public System.Nullable<int> FactorTaxPrice
		{
			get
			{
				return this._FactorTaxPrice;
			}
			set
			{
				if ((this._FactorTaxPrice != value))
				{
					this._FactorTaxPrice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorServicePrice", DbType="Int")]
		public System.Nullable<int> FactorServicePrice
		{
			get
			{
				return this._FactorServicePrice;
			}
			set
			{
				if ((this._FactorServicePrice != value))
				{
					this._FactorServicePrice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorCutPrice", DbType="Int")]
		public System.Nullable<int> FactorCutPrice
		{
			get
			{
				return this._FactorCutPrice;
			}
			set
			{
				if ((this._FactorCutPrice != value))
				{
					this._FactorCutPrice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorSumPrice", DbType="Int")]
		public System.Nullable<int> FactorSumPrice
		{
			get
			{
				return this._FactorSumPrice;
			}
			set
			{
				if ((this._FactorSumPrice != value))
				{
					this._FactorSumPrice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailValue1", DbType="Float")]
		public System.Nullable<double> DetailValue1
		{
			get
			{
				return this._DetailValue1;
			}
			set
			{
				if ((this._DetailValue1 != value))
				{
					this._DetailValue1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailValue2", DbType="Int")]
		public System.Nullable<int> DetailValue2
		{
			get
			{
				return this._DetailValue2;
			}
			set
			{
				if ((this._DetailValue2 != value))
				{
					this._DetailValue2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultPrice", DbType="Int")]
		public System.Nullable<int> DefaultPrice
		{
			get
			{
				return this._DefaultPrice;
			}
			set
			{
				if ((this._DefaultPrice != value))
				{
					this._DefaultPrice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailPrice", DbType="Int")]
		public System.Nullable<int> DetailPrice
		{
			get
			{
				return this._DetailPrice;
			}
			set
			{
				if ((this._DetailPrice != value))
				{
					this._DetailPrice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailExit", DbType="Bit")]
		public System.Nullable<bool> DetailExit
		{
			get
			{
				return this._DetailExit;
			}
			set
			{
				if ((this._DetailExit != value))
				{
					this._DetailExit = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="NVarChar(200)")]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this._ProductName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductSize", DbType="Float")]
		public System.Nullable<double> ProductSize
		{
			get
			{
				return this._ProductSize;
			}
			set
			{
				if ((this._ProductSize != value))
				{
					this._ProductSize = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductDefaultPrice", DbType="Int")]
		public System.Nullable<int> ProductDefaultPrice
		{
			get
			{
				return this._ProductDefaultPrice;
			}
			set
			{
				if ((this._ProductDefaultPrice != value))
				{
					this._ProductDefaultPrice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(100)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this._GroupName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupUnit1", DbType="NVarChar(30)")]
		public string GroupUnit1
		{
			get
			{
				return this._GroupUnit1;
			}
			set
			{
				if ((this._GroupUnit1 != value))
				{
					this._GroupUnit1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupUnit2", DbType="NVarChar(30)")]
		public string GroupUnit2
		{
			get
			{
				return this._GroupUnit2;
			}
			set
			{
				if ((this._GroupUnit2 != value))
				{
					this._GroupUnit2 = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Messages")]
	public sealed partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageId;
		
		private string _MessageText;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIdChanging(int value);
    partial void OnMessageIdChanged();
    partial void OnMessageTextChanging(string value);
    partial void OnMessageTextChanged();
    #endregion
		
		public Message()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageId
		{
			get
			{
				return this._MessageId;
			}
			set
			{
				if ((this._MessageId != value))
				{
					this.OnMessageIdChanging(value);
					this.SendPropertyChanging();
					this._MessageId = value;
					this.SendPropertyChanged("MessageId");
					this.OnMessageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageText", DbType="NVarChar(MAX)")]
		public string MessageText
		{
			get
			{
				return this._MessageText;
			}
			set
			{
				if ((this._MessageText != value))
				{
					this.OnMessageTextChanging(value);
					this.SendPropertyChanging();
					this._MessageText = value;
					this.SendPropertyChanged("MessageText");
					this.OnMessageTextChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ViewFactors")]
	public sealed partial class ViewFactor
	{
		
		private int _FactorId;
		
		private System.Nullable<int> _PersonId;
		
		private string _PersonName;
		
		private string _PersonMobile;
		
		private System.Nullable<bool> _FactorType;
		
		private string _FactorNumber;
		
		private string _FactorDate;
		
		private System.Nullable<int> _FactorSumPrice;
		
		public ViewFactor()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorId", DbType="Int NOT NULL")]
		public int FactorId
		{
			get
			{
				return this._FactorId;
			}
			set
			{
				if ((this._FactorId != value))
				{
					this._FactorId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonId", DbType="Int")]
		public System.Nullable<int> PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					this._PersonId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonName", DbType="NVarChar(100)")]
		public string PersonName
		{
			get
			{
				return this._PersonName;
			}
			set
			{
				if ((this._PersonName != value))
				{
					this._PersonName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonMobile", DbType="NVarChar(11)")]
		public string PersonMobile
		{
			get
			{
				return this._PersonMobile;
			}
			set
			{
				if ((this._PersonMobile != value))
				{
					this._PersonMobile = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorType", DbType="Bit")]
		public System.Nullable<bool> FactorType
		{
			get
			{
				return this._FactorType;
			}
			set
			{
				if ((this._FactorType != value))
				{
					this._FactorType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorNumber", DbType="NVarChar(10)")]
		public string FactorNumber
		{
			get
			{
				return this._FactorNumber;
			}
			set
			{
				if ((this._FactorNumber != value))
				{
					this._FactorNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorDate", DbType="NVarChar(10)")]
		public string FactorDate
		{
			get
			{
				return this._FactorDate;
			}
			set
			{
				if ((this._FactorDate != value))
				{
					this._FactorDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorSumPrice", DbType="Int")]
		public System.Nullable<int> FactorSumPrice
		{
			get
			{
				return this._FactorSumPrice;
			}
			set
			{
				if ((this._FactorSumPrice != value))
				{
					this._FactorSumPrice = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
